
Lab3_Excercise.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029d0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002adc  08002adc  00012adc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b00  08002b00  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08002b00  08002b00  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b00  08002b00  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b00  08002b00  00012b00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b04  08002b04  00012b04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08002b08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  20000064  08002b6c  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000174  08002b6c  00020174  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY
 13 .debug_info   000089de  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d51  00000000  00000000  00028aae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ac0  00000000  00000000  0002a800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000818  00000000  00000000  0002b2c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016cc8  00000000  00000000  0002bad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c3c0  00000000  00000000  000427a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00082632  00000000  00000000  0004eb60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000029f4  00000000  00000000  000d1194  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000041  00000000  00000000  000d3b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000064 	.word	0x20000064
 8000128:	00000000 	.word	0x00000000
 800012c:	08002ac4 	.word	0x08002ac4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000068 	.word	0x20000068
 8000148:	08002ac4 	.word	0x08002ac4

0800014c <red_led_blinky>:
 *      Author: PC
 */

#include "blinky_led.h"

void red_led_blinky(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	if(timer4_flag == 1) {
 8000150:	4b14      	ldr	r3, [pc, #80]	; (80001a4 <red_led_blinky+0x58>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d122      	bne.n	800019e <red_led_blinky+0x52>
		HAL_GPIO_TogglePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin);
 8000158:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800015c:	4812      	ldr	r0, [pc, #72]	; (80001a8 <red_led_blinky+0x5c>)
 800015e:	f001 fca6 	bl	8001aae <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin);
 8000162:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000166:	4810      	ldr	r0, [pc, #64]	; (80001a8 <red_led_blinky+0x5c>)
 8000168:	f001 fca1 	bl	8001aae <HAL_GPIO_TogglePin>
		if(TIME_DURATION >= 100) {
 800016c:	4b0f      	ldr	r3, [pc, #60]	; (80001ac <red_led_blinky+0x60>)
 800016e:	681b      	ldr	r3, [r3, #0]
 8000170:	2b63      	cmp	r3, #99	; 0x63
 8000172:	dd11      	ble.n	8000198 <red_led_blinky+0x4c>
			if(mode_led == 0) {
 8000174:	4b0e      	ldr	r3, [pc, #56]	; (80001b0 <red_led_blinky+0x64>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	2b00      	cmp	r3, #0
 800017a:	d103      	bne.n	8000184 <red_led_blinky+0x38>
				setTimer4(30);
 800017c:	201e      	movs	r0, #30
 800017e:	f001 f81d 	bl	80011bc <setTimer4>
 8000182:	e002      	b.n	800018a <red_led_blinky+0x3e>
			}
			else {
				setTimer4(20);
 8000184:	2014      	movs	r0, #20
 8000186:	f001 f819 	bl	80011bc <setTimer4>
			}
			mode_led = 1 - mode_led;
 800018a:	4b09      	ldr	r3, [pc, #36]	; (80001b0 <red_led_blinky+0x64>)
 800018c:	681b      	ldr	r3, [r3, #0]
 800018e:	f1c3 0301 	rsb	r3, r3, #1
 8000192:	4a07      	ldr	r2, [pc, #28]	; (80001b0 <red_led_blinky+0x64>)
 8000194:	6013      	str	r3, [r2, #0]
		}
		else {
			setTimer4(25);
		}
	}
}
 8000196:	e002      	b.n	800019e <red_led_blinky+0x52>
			setTimer4(25);
 8000198:	2019      	movs	r0, #25
 800019a:	f001 f80f 	bl	80011bc <setTimer4>
}
 800019e:	bf00      	nop
 80001a0:	bd80      	pop	{r7, pc}
 80001a2:	bf00      	nop
 80001a4:	20000164 	.word	0x20000164
 80001a8:	40010800 	.word	0x40010800
 80001ac:	20000054 	.word	0x20000054
 80001b0:	200000a8 	.word	0x200000a8

080001b4 <amber_led_blinky>:

void amber_led_blinky(){
 80001b4:	b580      	push	{r7, lr}
 80001b6:	af00      	add	r7, sp, #0
	if(timer4_flag == 1) {
 80001b8:	4b14      	ldr	r3, [pc, #80]	; (800020c <amber_led_blinky+0x58>)
 80001ba:	681b      	ldr	r3, [r3, #0]
 80001bc:	2b01      	cmp	r3, #1
 80001be:	d122      	bne.n	8000206 <amber_led_blinky+0x52>
		HAL_GPIO_TogglePin(LED_YELLOW_0_GPIO_Port, LED_YELLOW_0_Pin);
 80001c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001c4:	4812      	ldr	r0, [pc, #72]	; (8000210 <amber_led_blinky+0x5c>)
 80001c6:	f001 fc72 	bl	8001aae <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin);
 80001ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80001ce:	4810      	ldr	r0, [pc, #64]	; (8000210 <amber_led_blinky+0x5c>)
 80001d0:	f001 fc6d 	bl	8001aae <HAL_GPIO_TogglePin>
		if(TIME_DURATION >= 100) {
 80001d4:	4b0f      	ldr	r3, [pc, #60]	; (8000214 <amber_led_blinky+0x60>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	2b63      	cmp	r3, #99	; 0x63
 80001da:	dd11      	ble.n	8000200 <amber_led_blinky+0x4c>
			if(mode_led == 0) {
 80001dc:	4b0e      	ldr	r3, [pc, #56]	; (8000218 <amber_led_blinky+0x64>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d103      	bne.n	80001ec <amber_led_blinky+0x38>
				setTimer4(30);
 80001e4:	201e      	movs	r0, #30
 80001e6:	f000 ffe9 	bl	80011bc <setTimer4>
 80001ea:	e002      	b.n	80001f2 <amber_led_blinky+0x3e>
			}
			else {
				setTimer4(20);
 80001ec:	2014      	movs	r0, #20
 80001ee:	f000 ffe5 	bl	80011bc <setTimer4>
			}
			mode_led = 1 - mode_led;
 80001f2:	4b09      	ldr	r3, [pc, #36]	; (8000218 <amber_led_blinky+0x64>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	f1c3 0301 	rsb	r3, r3, #1
 80001fa:	4a07      	ldr	r2, [pc, #28]	; (8000218 <amber_led_blinky+0x64>)
 80001fc:	6013      	str	r3, [r2, #0]
		}
		else {
			setTimer4(25);
		}
	}
}
 80001fe:	e002      	b.n	8000206 <amber_led_blinky+0x52>
			setTimer4(25);
 8000200:	2019      	movs	r0, #25
 8000202:	f000 ffdb 	bl	80011bc <setTimer4>
}
 8000206:	bf00      	nop
 8000208:	bd80      	pop	{r7, pc}
 800020a:	bf00      	nop
 800020c:	20000164 	.word	0x20000164
 8000210:	40010800 	.word	0x40010800
 8000214:	20000054 	.word	0x20000054
 8000218:	200000a8 	.word	0x200000a8

0800021c <green_led_blinky>:

void green_led_blinky(){
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
	if(timer4_flag == 1) {
 8000220:	4b14      	ldr	r3, [pc, #80]	; (8000274 <green_led_blinky+0x58>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	2b01      	cmp	r3, #1
 8000226:	d122      	bne.n	800026e <green_led_blinky+0x52>
		HAL_GPIO_TogglePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin);
 8000228:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800022c:	4812      	ldr	r0, [pc, #72]	; (8000278 <green_led_blinky+0x5c>)
 800022e:	f001 fc3e 	bl	8001aae <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin);
 8000232:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000236:	4810      	ldr	r0, [pc, #64]	; (8000278 <green_led_blinky+0x5c>)
 8000238:	f001 fc39 	bl	8001aae <HAL_GPIO_TogglePin>
		if(TIME_DURATION >= 100) {
 800023c:	4b0f      	ldr	r3, [pc, #60]	; (800027c <green_led_blinky+0x60>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	2b63      	cmp	r3, #99	; 0x63
 8000242:	dd11      	ble.n	8000268 <green_led_blinky+0x4c>
			if(mode_led == 0) {
 8000244:	4b0e      	ldr	r3, [pc, #56]	; (8000280 <green_led_blinky+0x64>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	2b00      	cmp	r3, #0
 800024a:	d103      	bne.n	8000254 <green_led_blinky+0x38>
				setTimer4(30);
 800024c:	201e      	movs	r0, #30
 800024e:	f000 ffb5 	bl	80011bc <setTimer4>
 8000252:	e002      	b.n	800025a <green_led_blinky+0x3e>
			}
			else {
				setTimer4(20);
 8000254:	2014      	movs	r0, #20
 8000256:	f000 ffb1 	bl	80011bc <setTimer4>
			}
			mode_led = 1 - mode_led;
 800025a:	4b09      	ldr	r3, [pc, #36]	; (8000280 <green_led_blinky+0x64>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	f1c3 0301 	rsb	r3, r3, #1
 8000262:	4a07      	ldr	r2, [pc, #28]	; (8000280 <green_led_blinky+0x64>)
 8000264:	6013      	str	r3, [r2, #0]
		}
		else {
			setTimer4(25);
		}
	}
}
 8000266:	e002      	b.n	800026e <green_led_blinky+0x52>
			setTimer4(25);
 8000268:	2019      	movs	r0, #25
 800026a:	f000 ffa7 	bl	80011bc <setTimer4>
}
 800026e:	bf00      	nop
 8000270:	bd80      	pop	{r7, pc}
 8000272:	bf00      	nop
 8000274:	20000164 	.word	0x20000164
 8000278:	40010800 	.word	0x40010800
 800027c:	20000054 	.word	0x20000054
 8000280:	200000a8 	.word	0x200000a8

08000284 <readButton>:

int button1_flag = 0;
int button2_flag = 0;
int button3_flag = 0;

GPIO_PinState readButton(int index) {
 8000284:	b580      	push	{r7, lr}
 8000286:	b082      	sub	sp, #8
 8000288:	af00      	add	r7, sp, #0
 800028a:	6078      	str	r0, [r7, #4]
	if(index == 1) return HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin);
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	2b01      	cmp	r3, #1
 8000290:	d105      	bne.n	800029e <readButton+0x1a>
 8000292:	2101      	movs	r1, #1
 8000294:	480d      	ldr	r0, [pc, #52]	; (80002cc <readButton+0x48>)
 8000296:	f001 fbdb 	bl	8001a50 <HAL_GPIO_ReadPin>
 800029a:	4603      	mov	r3, r0
 800029c:	e012      	b.n	80002c4 <readButton+0x40>
	else if(index == 2) return HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port, BUTTON_2_Pin);
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	2b02      	cmp	r3, #2
 80002a2:	d105      	bne.n	80002b0 <readButton+0x2c>
 80002a4:	2102      	movs	r1, #2
 80002a6:	4809      	ldr	r0, [pc, #36]	; (80002cc <readButton+0x48>)
 80002a8:	f001 fbd2 	bl	8001a50 <HAL_GPIO_ReadPin>
 80002ac:	4603      	mov	r3, r0
 80002ae:	e009      	b.n	80002c4 <readButton+0x40>
	else if(index == 3) return HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port, BUTTON_3_Pin);
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	2b03      	cmp	r3, #3
 80002b4:	d105      	bne.n	80002c2 <readButton+0x3e>
 80002b6:	2104      	movs	r1, #4
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <readButton+0x48>)
 80002ba:	f001 fbc9 	bl	8001a50 <HAL_GPIO_ReadPin>
 80002be:	4603      	mov	r3, r0
 80002c0:	e000      	b.n	80002c4 <readButton+0x40>
	else return GPIO_PIN_SET;
 80002c2:	2301      	movs	r3, #1
}
 80002c4:	4618      	mov	r0, r3
 80002c6:	3708      	adds	r7, #8
 80002c8:	46bd      	mov	sp, r7
 80002ca:	bd80      	pop	{r7, pc}
 80002cc:	40010c00 	.word	0x40010c00

080002d0 <isButton1Pressed>:

int isButton1Pressed() {
 80002d0:	b480      	push	{r7}
 80002d2:	af00      	add	r7, sp, #0
	if(button1_flag == 1) {
 80002d4:	4b06      	ldr	r3, [pc, #24]	; (80002f0 <isButton1Pressed+0x20>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	2b01      	cmp	r3, #1
 80002da:	d104      	bne.n	80002e6 <isButton1Pressed+0x16>
		button1_flag = 0;
 80002dc:	4b04      	ldr	r3, [pc, #16]	; (80002f0 <isButton1Pressed+0x20>)
 80002de:	2200      	movs	r2, #0
 80002e0:	601a      	str	r2, [r3, #0]
		return 1;
 80002e2:	2301      	movs	r3, #1
 80002e4:	e000      	b.n	80002e8 <isButton1Pressed+0x18>
	}
	return 0;
 80002e6:	2300      	movs	r3, #0
}
 80002e8:	4618      	mov	r0, r3
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bc80      	pop	{r7}
 80002ee:	4770      	bx	lr
 80002f0:	2000009c 	.word	0x2000009c

080002f4 <isButton2Pressed>:

int isButton2Pressed() {
 80002f4:	b480      	push	{r7}
 80002f6:	af00      	add	r7, sp, #0
	if(button2_flag == 1) {
 80002f8:	4b06      	ldr	r3, [pc, #24]	; (8000314 <isButton2Pressed+0x20>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	2b01      	cmp	r3, #1
 80002fe:	d104      	bne.n	800030a <isButton2Pressed+0x16>
		button2_flag = 0;
 8000300:	4b04      	ldr	r3, [pc, #16]	; (8000314 <isButton2Pressed+0x20>)
 8000302:	2200      	movs	r2, #0
 8000304:	601a      	str	r2, [r3, #0]
		return 1;
 8000306:	2301      	movs	r3, #1
 8000308:	e000      	b.n	800030c <isButton2Pressed+0x18>
	}
	return 0;
 800030a:	2300      	movs	r3, #0
}
 800030c:	4618      	mov	r0, r3
 800030e:	46bd      	mov	sp, r7
 8000310:	bc80      	pop	{r7}
 8000312:	4770      	bx	lr
 8000314:	200000a0 	.word	0x200000a0

08000318 <isButton3Pressed>:

int isButton3Pressed() {
 8000318:	b480      	push	{r7}
 800031a:	af00      	add	r7, sp, #0
	if(button3_flag == 1) {
 800031c:	4b06      	ldr	r3, [pc, #24]	; (8000338 <isButton3Pressed+0x20>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	2b01      	cmp	r3, #1
 8000322:	d104      	bne.n	800032e <isButton3Pressed+0x16>
		button3_flag = 0;
 8000324:	4b04      	ldr	r3, [pc, #16]	; (8000338 <isButton3Pressed+0x20>)
 8000326:	2200      	movs	r2, #0
 8000328:	601a      	str	r2, [r3, #0]
		return 1;
 800032a:	2301      	movs	r3, #1
 800032c:	e000      	b.n	8000330 <isButton3Pressed+0x18>
	}
	return 0;
 800032e:	2300      	movs	r3, #0
}
 8000330:	4618      	mov	r0, r3
 8000332:	46bd      	mov	sp, r7
 8000334:	bc80      	pop	{r7}
 8000336:	4770      	bx	lr
 8000338:	200000a4 	.word	0x200000a4

0800033c <subKeyProcess1>:

void subKeyProcess1(){
 800033c:	b480      	push	{r7}
 800033e:	af00      	add	r7, sp, #0
	//TODO
	button1_flag = 1;
 8000340:	4b03      	ldr	r3, [pc, #12]	; (8000350 <subKeyProcess1+0x14>)
 8000342:	2201      	movs	r2, #1
 8000344:	601a      	str	r2, [r3, #0]
}
 8000346:	bf00      	nop
 8000348:	46bd      	mov	sp, r7
 800034a:	bc80      	pop	{r7}
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop
 8000350:	2000009c 	.word	0x2000009c

08000354 <subKeyProcess2>:

void subKeyProcess2(){
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
	//TODO
	button2_flag = 1;
 8000358:	4b03      	ldr	r3, [pc, #12]	; (8000368 <subKeyProcess2+0x14>)
 800035a:	2201      	movs	r2, #1
 800035c:	601a      	str	r2, [r3, #0]
}
 800035e:	bf00      	nop
 8000360:	46bd      	mov	sp, r7
 8000362:	bc80      	pop	{r7}
 8000364:	4770      	bx	lr
 8000366:	bf00      	nop
 8000368:	200000a0 	.word	0x200000a0

0800036c <subKeyProcess3>:

void subKeyProcess3(){
 800036c:	b480      	push	{r7}
 800036e:	af00      	add	r7, sp, #0
	//TODO
	button3_flag = 1;
 8000370:	4b03      	ldr	r3, [pc, #12]	; (8000380 <subKeyProcess3+0x14>)
 8000372:	2201      	movs	r2, #1
 8000374:	601a      	str	r2, [r3, #0]
}
 8000376:	bf00      	nop
 8000378:	46bd      	mov	sp, r7
 800037a:	bc80      	pop	{r7}
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop
 8000380:	200000a4 	.word	0x200000a4

08000384 <getKeyInput>:

void getKeyInput() {
 8000384:	b580      	push	{r7, lr}
 8000386:	b082      	sub	sp, #8
 8000388:	af00      	add	r7, sp, #0
	for(int i=0; i<NO_OF_BUTTONS; i++) {
 800038a:	2300      	movs	r3, #0
 800038c:	607b      	str	r3, [r7, #4]
 800038e:	e089      	b.n	80004a4 <getKeyInput+0x120>
		debounceButtonBuffer3[i] = debounceButtonBuffer2[i];
 8000390:	4a49      	ldr	r2, [pc, #292]	; (80004b8 <getKeyInput+0x134>)
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	4413      	add	r3, r2
 8000396:	7819      	ldrb	r1, [r3, #0]
 8000398:	4a48      	ldr	r2, [pc, #288]	; (80004bc <getKeyInput+0x138>)
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	4413      	add	r3, r2
 800039e:	460a      	mov	r2, r1
 80003a0:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 80003a2:	4a47      	ldr	r2, [pc, #284]	; (80004c0 <getKeyInput+0x13c>)
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	4413      	add	r3, r2
 80003a8:	7819      	ldrb	r1, [r3, #0]
 80003aa:	4a43      	ldr	r2, [pc, #268]	; (80004b8 <getKeyInput+0x134>)
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	4413      	add	r3, r2
 80003b0:	460a      	mov	r2, r1
 80003b2:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer1[i] = readButton(i+1);
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	3301      	adds	r3, #1
 80003b8:	4618      	mov	r0, r3
 80003ba:	f7ff ff63 	bl	8000284 <readButton>
 80003be:	4603      	mov	r3, r0
 80003c0:	4619      	mov	r1, r3
 80003c2:	4a3f      	ldr	r2, [pc, #252]	; (80004c0 <getKeyInput+0x13c>)
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	4413      	add	r3, r2
 80003c8:	460a      	mov	r2, r1
 80003ca:	701a      	strb	r2, [r3, #0]

		if((debounceButtonBuffer1[i]==debounceButtonBuffer2[i]) && (debounceButtonBuffer1[i]==debounceButtonBuffer3[i])) {
 80003cc:	4a3c      	ldr	r2, [pc, #240]	; (80004c0 <getKeyInput+0x13c>)
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	4413      	add	r3, r2
 80003d2:	781a      	ldrb	r2, [r3, #0]
 80003d4:	4938      	ldr	r1, [pc, #224]	; (80004b8 <getKeyInput+0x134>)
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	440b      	add	r3, r1
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	429a      	cmp	r2, r3
 80003de:	d15e      	bne.n	800049e <getKeyInput+0x11a>
 80003e0:	4a37      	ldr	r2, [pc, #220]	; (80004c0 <getKeyInput+0x13c>)
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	4413      	add	r3, r2
 80003e6:	781a      	ldrb	r2, [r3, #0]
 80003e8:	4934      	ldr	r1, [pc, #208]	; (80004bc <getKeyInput+0x138>)
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	440b      	add	r3, r1
 80003ee:	781b      	ldrb	r3, [r3, #0]
 80003f0:	429a      	cmp	r2, r3
 80003f2:	d154      	bne.n	800049e <getKeyInput+0x11a>
			if(buttonBuffer[i] != debounceButtonBuffer1[i]) {
 80003f4:	4a33      	ldr	r2, [pc, #204]	; (80004c4 <getKeyInput+0x140>)
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	4413      	add	r3, r2
 80003fa:	781a      	ldrb	r2, [r3, #0]
 80003fc:	4930      	ldr	r1, [pc, #192]	; (80004c0 <getKeyInput+0x13c>)
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	440b      	add	r3, r1
 8000402:	781b      	ldrb	r3, [r3, #0]
 8000404:	429a      	cmp	r2, r3
 8000406:	d02b      	beq.n	8000460 <getKeyInput+0xdc>
				buttonBuffer[i] = debounceButtonBuffer1[i];
 8000408:	4a2d      	ldr	r2, [pc, #180]	; (80004c0 <getKeyInput+0x13c>)
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	4413      	add	r3, r2
 800040e:	7819      	ldrb	r1, [r3, #0]
 8000410:	4a2c      	ldr	r2, [pc, #176]	; (80004c4 <getKeyInput+0x140>)
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	4413      	add	r3, r2
 8000416:	460a      	mov	r2, r1
 8000418:	701a      	strb	r2, [r3, #0]
				if(debounceButtonBuffer1[i] == PRESSED_STATE) {
 800041a:	4a29      	ldr	r2, [pc, #164]	; (80004c0 <getKeyInput+0x13c>)
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	4413      	add	r3, r2
 8000420:	781b      	ldrb	r3, [r3, #0]
 8000422:	2b00      	cmp	r3, #0
 8000424:	d13b      	bne.n	800049e <getKeyInput+0x11a>
					switch (i) {
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	2b02      	cmp	r3, #2
 800042a:	d00f      	beq.n	800044c <getKeyInput+0xc8>
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	2b02      	cmp	r3, #2
 8000430:	dc0f      	bgt.n	8000452 <getKeyInput+0xce>
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	2b00      	cmp	r3, #0
 8000436:	d003      	beq.n	8000440 <getKeyInput+0xbc>
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	2b01      	cmp	r3, #1
 800043c:	d003      	beq.n	8000446 <getKeyInput+0xc2>
						break;
					case 2:
						subKeyProcess3();
						break;
					default:
						break;
 800043e:	e008      	b.n	8000452 <getKeyInput+0xce>
						subKeyProcess1();
 8000440:	f7ff ff7c 	bl	800033c <subKeyProcess1>
						break;
 8000444:	e006      	b.n	8000454 <getKeyInput+0xd0>
						subKeyProcess2();
 8000446:	f7ff ff85 	bl	8000354 <subKeyProcess2>
						break;
 800044a:	e003      	b.n	8000454 <getKeyInput+0xd0>
						subKeyProcess3();
 800044c:	f7ff ff8e 	bl	800036c <subKeyProcess3>
						break;
 8000450:	e000      	b.n	8000454 <getKeyInput+0xd0>
						break;
 8000452:	bf00      	nop
					}
					counterForButtonPressed1s[i] = 100;
 8000454:	4a1c      	ldr	r2, [pc, #112]	; (80004c8 <getKeyInput+0x144>)
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	2164      	movs	r1, #100	; 0x64
 800045a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800045e:	e01e      	b.n	800049e <getKeyInput+0x11a>
				}
			}
			else {
				counterForButtonPressed1s[i]--;
 8000460:	4a19      	ldr	r2, [pc, #100]	; (80004c8 <getKeyInput+0x144>)
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000468:	3b01      	subs	r3, #1
 800046a:	b299      	uxth	r1, r3
 800046c:	4a16      	ldr	r2, [pc, #88]	; (80004c8 <getKeyInput+0x144>)
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(counterForButtonPressed1s[i] == 0) {
 8000474:	4a14      	ldr	r2, [pc, #80]	; (80004c8 <getKeyInput+0x144>)
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800047c:	2b00      	cmp	r3, #0
 800047e:	d10e      	bne.n	800049e <getKeyInput+0x11a>
					counterForButtonPressed1s[i] = 100;
 8000480:	4a11      	ldr	r2, [pc, #68]	; (80004c8 <getKeyInput+0x144>)
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	2164      	movs	r1, #100	; 0x64
 8000486:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					flagForButtonPressed1s[i] = 1;
 800048a:	4a10      	ldr	r2, [pc, #64]	; (80004cc <getKeyInput+0x148>)
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	4413      	add	r3, r2
 8000490:	2201      	movs	r2, #1
 8000492:	701a      	strb	r2, [r3, #0]
					buttonBuffer[i] = NORMAL_STATE;
 8000494:	4a0b      	ldr	r2, [pc, #44]	; (80004c4 <getKeyInput+0x140>)
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	4413      	add	r3, r2
 800049a:	2201      	movs	r2, #1
 800049c:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<NO_OF_BUTTONS; i++) {
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	3301      	adds	r3, #1
 80004a2:	607b      	str	r3, [r7, #4]
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	2b02      	cmp	r3, #2
 80004a8:	f77f af72 	ble.w	8000390 <getKeyInput+0xc>
				}
			}
		}
	}
}
 80004ac:	bf00      	nop
 80004ae:	bf00      	nop
 80004b0:	3708      	adds	r7, #8
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	20000088 	.word	0x20000088
 80004bc:	2000008c 	.word	0x2000008c
 80004c0:	20000084 	.word	0x20000084
 80004c4:	20000080 	.word	0x20000080
 80004c8:	20000094 	.word	0x20000094
 80004cc:	20000090 	.word	0x20000090

080004d0 <enable7SEG>:

#include "display7SEG.h"
int led7SEG_buffer[] = {0, 5, 0, 3};
char AnodeNumber[] = {0xC0,0xF9,0xA4,0xB0,0x99,0x92,0x82,0xF8,0x80,0x90,0x80}; //0 - 9,dp

void enable7SEG(int num) {
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(EN_0_GPIO_Port, EN_0_Pin, num==0?RESET:SET);
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	2b00      	cmp	r3, #0
 80004dc:	bf14      	ite	ne
 80004de:	2301      	movne	r3, #1
 80004e0:	2300      	moveq	r3, #0
 80004e2:	b2db      	uxtb	r3, r3
 80004e4:	461a      	mov	r2, r3
 80004e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004ea:	4815      	ldr	r0, [pc, #84]	; (8000540 <enable7SEG+0x70>)
 80004ec:	f001 fac7 	bl	8001a7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_1_GPIO_Port, EN_1_Pin, num==1?RESET:SET);
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	2b01      	cmp	r3, #1
 80004f4:	bf14      	ite	ne
 80004f6:	2301      	movne	r3, #1
 80004f8:	2300      	moveq	r3, #0
 80004fa:	b2db      	uxtb	r3, r3
 80004fc:	461a      	mov	r2, r3
 80004fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000502:	480f      	ldr	r0, [pc, #60]	; (8000540 <enable7SEG+0x70>)
 8000504:	f001 fabb 	bl	8001a7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_2_GPIO_Port, EN_2_Pin, num==2?RESET:SET);
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	2b02      	cmp	r3, #2
 800050c:	bf14      	ite	ne
 800050e:	2301      	movne	r3, #1
 8000510:	2300      	moveq	r3, #0
 8000512:	b2db      	uxtb	r3, r3
 8000514:	461a      	mov	r2, r3
 8000516:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800051a:	4809      	ldr	r0, [pc, #36]	; (8000540 <enable7SEG+0x70>)
 800051c:	f001 faaf 	bl	8001a7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_3_GPIO_Port, EN_3_Pin, num==3?RESET:SET);
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	2b03      	cmp	r3, #3
 8000524:	bf14      	ite	ne
 8000526:	2301      	movne	r3, #1
 8000528:	2300      	moveq	r3, #0
 800052a:	b2db      	uxtb	r3, r3
 800052c:	461a      	mov	r2, r3
 800052e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000532:	4803      	ldr	r0, [pc, #12]	; (8000540 <enable7SEG+0x70>)
 8000534:	f001 faa3 	bl	8001a7e <HAL_GPIO_WritePin>
}
 8000538:	bf00      	nop
 800053a:	3708      	adds	r7, #8
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	40010c00 	.word	0x40010c00

08000544 <display7SEG>:

void display7SEG(int num) {
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
	if((num<0) || (num>9)) num=0;
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	2b00      	cmp	r3, #0
 8000550:	db02      	blt.n	8000558 <display7SEG+0x14>
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	2b09      	cmp	r3, #9
 8000556:	dd01      	ble.n	800055c <display7SEG+0x18>
 8000558:	2300      	movs	r3, #0
 800055a:	607b      	str	r3, [r7, #4]
	HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, AnodeNumber[num]&0x01?SET:RESET);
 800055c:	4a31      	ldr	r2, [pc, #196]	; (8000624 <display7SEG+0xe0>)
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	4413      	add	r3, r2
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	f003 0301 	and.w	r3, r3, #1
 8000568:	b2db      	uxtb	r3, r3
 800056a:	461a      	mov	r2, r3
 800056c:	2101      	movs	r1, #1
 800056e:	482e      	ldr	r0, [pc, #184]	; (8000628 <display7SEG+0xe4>)
 8000570:	f001 fa85 	bl	8001a7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, AnodeNumber[num]&0x02?SET:RESET);
 8000574:	4a2b      	ldr	r2, [pc, #172]	; (8000624 <display7SEG+0xe0>)
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	4413      	add	r3, r2
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	105b      	asrs	r3, r3, #1
 800057e:	b2db      	uxtb	r3, r3
 8000580:	f003 0301 	and.w	r3, r3, #1
 8000584:	b2db      	uxtb	r3, r3
 8000586:	461a      	mov	r2, r3
 8000588:	2102      	movs	r1, #2
 800058a:	4827      	ldr	r0, [pc, #156]	; (8000628 <display7SEG+0xe4>)
 800058c:	f001 fa77 	bl	8001a7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, AnodeNumber[num]&0x04?SET:RESET);
 8000590:	4a24      	ldr	r2, [pc, #144]	; (8000624 <display7SEG+0xe0>)
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	4413      	add	r3, r2
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	109b      	asrs	r3, r3, #2
 800059a:	b2db      	uxtb	r3, r3
 800059c:	f003 0301 	and.w	r3, r3, #1
 80005a0:	b2db      	uxtb	r3, r3
 80005a2:	461a      	mov	r2, r3
 80005a4:	2104      	movs	r1, #4
 80005a6:	4820      	ldr	r0, [pc, #128]	; (8000628 <display7SEG+0xe4>)
 80005a8:	f001 fa69 	bl	8001a7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, AnodeNumber[num]&0x08?SET:RESET);
 80005ac:	4a1d      	ldr	r2, [pc, #116]	; (8000624 <display7SEG+0xe0>)
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	4413      	add	r3, r2
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	10db      	asrs	r3, r3, #3
 80005b6:	b2db      	uxtb	r3, r3
 80005b8:	f003 0301 	and.w	r3, r3, #1
 80005bc:	b2db      	uxtb	r3, r3
 80005be:	461a      	mov	r2, r3
 80005c0:	2108      	movs	r1, #8
 80005c2:	4819      	ldr	r0, [pc, #100]	; (8000628 <display7SEG+0xe4>)
 80005c4:	f001 fa5b 	bl	8001a7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, AnodeNumber[num]&0x10?SET:RESET);
 80005c8:	4a16      	ldr	r2, [pc, #88]	; (8000624 <display7SEG+0xe0>)
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	4413      	add	r3, r2
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	111b      	asrs	r3, r3, #4
 80005d2:	b2db      	uxtb	r3, r3
 80005d4:	f003 0301 	and.w	r3, r3, #1
 80005d8:	b2db      	uxtb	r3, r3
 80005da:	461a      	mov	r2, r3
 80005dc:	2110      	movs	r1, #16
 80005de:	4812      	ldr	r0, [pc, #72]	; (8000628 <display7SEG+0xe4>)
 80005e0:	f001 fa4d 	bl	8001a7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, AnodeNumber[num]&0x20?SET:RESET);
 80005e4:	4a0f      	ldr	r2, [pc, #60]	; (8000624 <display7SEG+0xe0>)
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	4413      	add	r3, r2
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	115b      	asrs	r3, r3, #5
 80005ee:	b2db      	uxtb	r3, r3
 80005f0:	f003 0301 	and.w	r3, r3, #1
 80005f4:	b2db      	uxtb	r3, r3
 80005f6:	461a      	mov	r2, r3
 80005f8:	2120      	movs	r1, #32
 80005fa:	480b      	ldr	r0, [pc, #44]	; (8000628 <display7SEG+0xe4>)
 80005fc:	f001 fa3f 	bl	8001a7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, AnodeNumber[num]&0x40?SET:RESET);
 8000600:	4a08      	ldr	r2, [pc, #32]	; (8000624 <display7SEG+0xe0>)
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	4413      	add	r3, r2
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	119b      	asrs	r3, r3, #6
 800060a:	b2db      	uxtb	r3, r3
 800060c:	f003 0301 	and.w	r3, r3, #1
 8000610:	b2db      	uxtb	r3, r3
 8000612:	461a      	mov	r2, r3
 8000614:	2140      	movs	r1, #64	; 0x40
 8000616:	4804      	ldr	r0, [pc, #16]	; (8000628 <display7SEG+0xe4>)
 8000618:	f001 fa31 	bl	8001a7e <HAL_GPIO_WritePin>

}
 800061c:	bf00      	nop
 800061e:	3708      	adds	r7, #8
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	20000010 	.word	0x20000010
 8000628:	40010800 	.word	0x40010800

0800062c <updateBuffer7SEG>:

void updateBuffer7SEG(int value1, int value2) {
 800062c:	b480      	push	{r7}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
 8000634:	6039      	str	r1, [r7, #0]
	led7SEG_buffer[0] = value1/10;
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	4a18      	ldr	r2, [pc, #96]	; (800069c <updateBuffer7SEG+0x70>)
 800063a:	fb82 1203 	smull	r1, r2, r2, r3
 800063e:	1092      	asrs	r2, r2, #2
 8000640:	17db      	asrs	r3, r3, #31
 8000642:	1ad3      	subs	r3, r2, r3
 8000644:	4a16      	ldr	r2, [pc, #88]	; (80006a0 <updateBuffer7SEG+0x74>)
 8000646:	6013      	str	r3, [r2, #0]
	led7SEG_buffer[1] = value1%10;
 8000648:	6879      	ldr	r1, [r7, #4]
 800064a:	4b14      	ldr	r3, [pc, #80]	; (800069c <updateBuffer7SEG+0x70>)
 800064c:	fb83 2301 	smull	r2, r3, r3, r1
 8000650:	109a      	asrs	r2, r3, #2
 8000652:	17cb      	asrs	r3, r1, #31
 8000654:	1ad2      	subs	r2, r2, r3
 8000656:	4613      	mov	r3, r2
 8000658:	009b      	lsls	r3, r3, #2
 800065a:	4413      	add	r3, r2
 800065c:	005b      	lsls	r3, r3, #1
 800065e:	1aca      	subs	r2, r1, r3
 8000660:	4b0f      	ldr	r3, [pc, #60]	; (80006a0 <updateBuffer7SEG+0x74>)
 8000662:	605a      	str	r2, [r3, #4]
	led7SEG_buffer[2] = value2/10;
 8000664:	683b      	ldr	r3, [r7, #0]
 8000666:	4a0d      	ldr	r2, [pc, #52]	; (800069c <updateBuffer7SEG+0x70>)
 8000668:	fb82 1203 	smull	r1, r2, r2, r3
 800066c:	1092      	asrs	r2, r2, #2
 800066e:	17db      	asrs	r3, r3, #31
 8000670:	1ad3      	subs	r3, r2, r3
 8000672:	4a0b      	ldr	r2, [pc, #44]	; (80006a0 <updateBuffer7SEG+0x74>)
 8000674:	6093      	str	r3, [r2, #8]
	led7SEG_buffer[3] = value2%10;
 8000676:	6839      	ldr	r1, [r7, #0]
 8000678:	4b08      	ldr	r3, [pc, #32]	; (800069c <updateBuffer7SEG+0x70>)
 800067a:	fb83 2301 	smull	r2, r3, r3, r1
 800067e:	109a      	asrs	r2, r3, #2
 8000680:	17cb      	asrs	r3, r1, #31
 8000682:	1ad2      	subs	r2, r2, r3
 8000684:	4613      	mov	r3, r2
 8000686:	009b      	lsls	r3, r3, #2
 8000688:	4413      	add	r3, r2
 800068a:	005b      	lsls	r3, r3, #1
 800068c:	1aca      	subs	r2, r1, r3
 800068e:	4b04      	ldr	r3, [pc, #16]	; (80006a0 <updateBuffer7SEG+0x74>)
 8000690:	60da      	str	r2, [r3, #12]
}
 8000692:	bf00      	nop
 8000694:	370c      	adds	r7, #12
 8000696:	46bd      	mov	sp, r7
 8000698:	bc80      	pop	{r7}
 800069a:	4770      	bx	lr
 800069c:	66666667 	.word	0x66666667
 80006a0:	20000000 	.word	0x20000000

080006a4 <scan7SEG>:

void scan7SEG() {
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
	if(index_7SEG == -1) {
 80006a8:	4b26      	ldr	r3, [pc, #152]	; (8000744 <scan7SEG+0xa0>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006b0:	d126      	bne.n	8000700 <scan7SEG+0x5c>
		updateBuffer7SEG(RED_TIME, GREEN_TIME);
 80006b2:	4b25      	ldr	r3, [pc, #148]	; (8000748 <scan7SEG+0xa4>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	4a25      	ldr	r2, [pc, #148]	; (800074c <scan7SEG+0xa8>)
 80006b8:	6812      	ldr	r2, [r2, #0]
 80006ba:	4611      	mov	r1, r2
 80006bc:	4618      	mov	r0, r3
 80006be:	f7ff ffb5 	bl	800062c <updateBuffer7SEG>
		HAL_GPIO_WritePin(EN_0_GPIO_Port, EN_0_Pin, GPIO_PIN_SET);
 80006c2:	2201      	movs	r2, #1
 80006c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006c8:	4821      	ldr	r0, [pc, #132]	; (8000750 <scan7SEG+0xac>)
 80006ca:	f001 f9d8 	bl	8001a7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_1_GPIO_Port, EN_1_Pin, GPIO_PIN_SET);
 80006ce:	2201      	movs	r2, #1
 80006d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006d4:	481e      	ldr	r0, [pc, #120]	; (8000750 <scan7SEG+0xac>)
 80006d6:	f001 f9d2 	bl	8001a7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_2_GPIO_Port, EN_2_Pin, GPIO_PIN_SET);
 80006da:	2201      	movs	r2, #1
 80006dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006e0:	481b      	ldr	r0, [pc, #108]	; (8000750 <scan7SEG+0xac>)
 80006e2:	f001 f9cc 	bl	8001a7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_3_GPIO_Port, EN_3_Pin, GPIO_PIN_SET);
 80006e6:	2201      	movs	r2, #1
 80006e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006ec:	4818      	ldr	r0, [pc, #96]	; (8000750 <scan7SEG+0xac>)
 80006ee:	f001 f9c6 	bl	8001a7e <HAL_GPIO_WritePin>
		index_7SEG = 0;
 80006f2:	4b14      	ldr	r3, [pc, #80]	; (8000744 <scan7SEG+0xa0>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
		setTimer5(5);
 80006f8:	2005      	movs	r0, #5
 80006fa:	f000 fd7d 	bl	80011f8 <setTimer5>
		if(index_7SEG >= 4) index_7SEG = 0;
		enable7SEG(index_7SEG);
		display7SEG(led7SEG_buffer[index_7SEG]);

	}
}
 80006fe:	e01f      	b.n	8000740 <scan7SEG+0x9c>
		if(timer5_flag == 1) {
 8000700:	4b14      	ldr	r3, [pc, #80]	; (8000754 <scan7SEG+0xb0>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	2b01      	cmp	r3, #1
 8000706:	d107      	bne.n	8000718 <scan7SEG+0x74>
			index_7SEG++;
 8000708:	4b0e      	ldr	r3, [pc, #56]	; (8000744 <scan7SEG+0xa0>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	3301      	adds	r3, #1
 800070e:	4a0d      	ldr	r2, [pc, #52]	; (8000744 <scan7SEG+0xa0>)
 8000710:	6013      	str	r3, [r2, #0]
			setTimer5(5);
 8000712:	2005      	movs	r0, #5
 8000714:	f000 fd70 	bl	80011f8 <setTimer5>
		if(index_7SEG >= 4) index_7SEG = 0;
 8000718:	4b0a      	ldr	r3, [pc, #40]	; (8000744 <scan7SEG+0xa0>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	2b03      	cmp	r3, #3
 800071e:	dd02      	ble.n	8000726 <scan7SEG+0x82>
 8000720:	4b08      	ldr	r3, [pc, #32]	; (8000744 <scan7SEG+0xa0>)
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
		enable7SEG(index_7SEG);
 8000726:	4b07      	ldr	r3, [pc, #28]	; (8000744 <scan7SEG+0xa0>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	4618      	mov	r0, r3
 800072c:	f7ff fed0 	bl	80004d0 <enable7SEG>
		display7SEG(led7SEG_buffer[index_7SEG]);
 8000730:	4b04      	ldr	r3, [pc, #16]	; (8000744 <scan7SEG+0xa0>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a08      	ldr	r2, [pc, #32]	; (8000758 <scan7SEG+0xb4>)
 8000736:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800073a:	4618      	mov	r0, r3
 800073c:	f7ff ff02 	bl	8000544 <display7SEG>
}
 8000740:	bf00      	nop
 8000742:	bd80      	pop	{r7, pc}
 8000744:	2000001c 	.word	0x2000001c
 8000748:	20000038 	.word	0x20000038
 800074c:	20000040 	.word	0x20000040
 8000750:	40010c00 	.word	0x40010c00
 8000754:	2000016c 	.word	0x2000016c
 8000758:	20000000 	.word	0x20000000

0800075c <saveNormalTime>:
 *      Author: PC
 */

#include "fsm_main.h"
//use timer2 for main_fsm
void saveNormalTime() {
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
	PRE_NORMAL_RED_TIME = RED_TIME;
 8000760:	4b09      	ldr	r3, [pc, #36]	; (8000788 <saveNormalTime+0x2c>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a09      	ldr	r2, [pc, #36]	; (800078c <saveNormalTime+0x30>)
 8000766:	6013      	str	r3, [r2, #0]
	RED_OLD_TIME = RED_TIME;
 8000768:	4b07      	ldr	r3, [pc, #28]	; (8000788 <saveNormalTime+0x2c>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a08      	ldr	r2, [pc, #32]	; (8000790 <saveNormalTime+0x34>)
 800076e:	6013      	str	r3, [r2, #0]
	PRE_NORMAL_AMBER_TIME = AMBER_TIME;
 8000770:	4b08      	ldr	r3, [pc, #32]	; (8000794 <saveNormalTime+0x38>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a08      	ldr	r2, [pc, #32]	; (8000798 <saveNormalTime+0x3c>)
 8000776:	6013      	str	r3, [r2, #0]
	PRE_NORMAL_GREEN_TIME = GREEN_TIME;
 8000778:	4b08      	ldr	r3, [pc, #32]	; (800079c <saveNormalTime+0x40>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a08      	ldr	r2, [pc, #32]	; (80007a0 <saveNormalTime+0x44>)
 800077e:	6013      	str	r3, [r2, #0]
}
 8000780:	bf00      	nop
 8000782:	46bd      	mov	sp, r7
 8000784:	bc80      	pop	{r7}
 8000786:	4770      	bx	lr
 8000788:	20000038 	.word	0x20000038
 800078c:	20000020 	.word	0x20000020
 8000790:	2000002c 	.word	0x2000002c
 8000794:	2000003c 	.word	0x2000003c
 8000798:	20000024 	.word	0x20000024
 800079c:	20000040 	.word	0x20000040
 80007a0:	20000028 	.word	0x20000028

080007a4 <normalToMode2>:
void normalToMode2() {
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
	clearAllLed();
 80007a8:	f000 fb20 	bl	8000dec <clearAllLed>
	setTimer4(25);
 80007ac:	2019      	movs	r0, #25
 80007ae:	f000 fd05 	bl	80011bc <setTimer4>
	status = INC_RED;
 80007b2:	4b03      	ldr	r3, [pc, #12]	; (80007c0 <normalToMode2+0x1c>)
 80007b4:	2206      	movs	r2, #6
 80007b6:	601a      	str	r2, [r3, #0]
	saveNormalTime();
 80007b8:	f7ff ffd0 	bl	800075c <saveNormalTime>
}
 80007bc:	bf00      	nop
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	20000044 	.word	0x20000044

080007c4 <count_down>:
void count_down() {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
	if(timer1_flag == 1) {
 80007c8:	4b13      	ldr	r3, [pc, #76]	; (8000818 <count_down+0x54>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	2b01      	cmp	r3, #1
 80007ce:	d121      	bne.n	8000814 <count_down+0x50>
	  setTimer1(100);
 80007d0:	2064      	movs	r0, #100	; 0x64
 80007d2:	f000 fcb7 	bl	8001144 <setTimer1>
	  counter1--;
 80007d6:	4b11      	ldr	r3, [pc, #68]	; (800081c <count_down+0x58>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	3b01      	subs	r3, #1
 80007dc:	4a0f      	ldr	r2, [pc, #60]	; (800081c <count_down+0x58>)
 80007de:	6013      	str	r3, [r2, #0]
	  counter2--;
 80007e0:	4b0f      	ldr	r3, [pc, #60]	; (8000820 <count_down+0x5c>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	3b01      	subs	r3, #1
 80007e6:	4a0e      	ldr	r2, [pc, #56]	; (8000820 <count_down+0x5c>)
 80007e8:	6013      	str	r3, [r2, #0]
	  if(counter1 >= 0 && counter2 >=0)
 80007ea:	4b0c      	ldr	r3, [pc, #48]	; (800081c <count_down+0x58>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	db0b      	blt.n	800080a <count_down+0x46>
 80007f2:	4b0b      	ldr	r3, [pc, #44]	; (8000820 <count_down+0x5c>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	db07      	blt.n	800080a <count_down+0x46>
		  updateBuffer7SEG(counter1, counter2);
 80007fa:	4b08      	ldr	r3, [pc, #32]	; (800081c <count_down+0x58>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	4a08      	ldr	r2, [pc, #32]	; (8000820 <count_down+0x5c>)
 8000800:	6812      	ldr	r2, [r2, #0]
 8000802:	4611      	mov	r1, r2
 8000804:	4618      	mov	r0, r3
 8000806:	f7ff ff11 	bl	800062c <updateBuffer7SEG>
	  HAL_GPIO_TogglePin(LED_TEST_GPIO_Port, LED_TEST_Pin);
 800080a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800080e:	4805      	ldr	r0, [pc, #20]	; (8000824 <count_down+0x60>)
 8000810:	f001 f94d 	bl	8001aae <HAL_GPIO_TogglePin>
  }
}
 8000814:	bf00      	nop
 8000816:	bd80      	pop	{r7, pc}
 8000818:	2000014c 	.word	0x2000014c
 800081c:	20000048 	.word	0x20000048
 8000820:	2000004c 	.word	0x2000004c
 8000824:	40010c00 	.word	0x40010c00

08000828 <main_fsm>:
void main_fsm() {
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
	switch(status) {
 800082c:	4bab      	ldr	r3, [pc, #684]	; (8000adc <main_fsm+0x2b4>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	3b01      	subs	r3, #1
 8000832:	2b08      	cmp	r3, #8
 8000834:	f200 8250 	bhi.w	8000cd8 <main_fsm+0x4b0>
 8000838:	a201      	add	r2, pc, #4	; (adr r2, 8000840 <main_fsm+0x18>)
 800083a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800083e:	bf00      	nop
 8000840:	08000865 	.word	0x08000865
 8000844:	080008a9 	.word	0x080008a9
 8000848:	08000903 	.word	0x08000903
 800084c:	08000971 	.word	0x08000971
 8000850:	080009cb 	.word	0x080009cb
 8000854:	08000a39 	.word	0x08000a39
 8000858:	08000b09 	.word	0x08000b09
 800085c:	08000b97 	.word	0x08000b97
 8000860:	08000c63 	.word	0x08000c63
		case INIT:
			clearAllLed();
 8000864:	f000 fac2 	bl	8000dec <clearAllLed>
			status = RED_GREEN;
 8000868:	4b9c      	ldr	r3, [pc, #624]	; (8000adc <main_fsm+0x2b4>)
 800086a:	2202      	movs	r2, #2
 800086c:	601a      	str	r2, [r3, #0]
			setTimer1(100);
 800086e:	2064      	movs	r0, #100	; 0x64
 8000870:	f000 fc68 	bl	8001144 <setTimer1>
			setTimer2(GREEN_TIME);
 8000874:	4b9a      	ldr	r3, [pc, #616]	; (8000ae0 <main_fsm+0x2b8>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4618      	mov	r0, r3
 800087a:	f000 fc81 	bl	8001180 <setTimer2>
			counter1 = RED_TIME/100;
 800087e:	4b99      	ldr	r3, [pc, #612]	; (8000ae4 <main_fsm+0x2bc>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	4a99      	ldr	r2, [pc, #612]	; (8000ae8 <main_fsm+0x2c0>)
 8000884:	fb82 1203 	smull	r1, r2, r2, r3
 8000888:	1152      	asrs	r2, r2, #5
 800088a:	17db      	asrs	r3, r3, #31
 800088c:	1ad3      	subs	r3, r2, r3
 800088e:	4a97      	ldr	r2, [pc, #604]	; (8000aec <main_fsm+0x2c4>)
 8000890:	6013      	str	r3, [r2, #0]
			counter2 = GREEN_TIME/100;
 8000892:	4b93      	ldr	r3, [pc, #588]	; (8000ae0 <main_fsm+0x2b8>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	4a94      	ldr	r2, [pc, #592]	; (8000ae8 <main_fsm+0x2c0>)
 8000898:	fb82 1203 	smull	r1, r2, r2, r3
 800089c:	1152      	asrs	r2, r2, #5
 800089e:	17db      	asrs	r3, r3, #31
 80008a0:	1ad3      	subs	r3, r2, r3
 80008a2:	4a93      	ldr	r2, [pc, #588]	; (8000af0 <main_fsm+0x2c8>)
 80008a4:	6013      	str	r3, [r2, #0]
			break;
 80008a6:	e228      	b.n	8000cfa <main_fsm+0x4d2>
		case RED_GREEN:
			setLedOnWay1(RED_LED);
 80008a8:	200a      	movs	r0, #10
 80008aa:	f000 fa43 	bl	8000d34 <setLedOnWay1>
			setLedOnWay2(GREEN_LED);
 80008ae:	200c      	movs	r0, #12
 80008b0:	f000 fa6e 	bl	8000d90 <setLedOnWay2>
			if(timer2_flag == 1) {
 80008b4:	4b8f      	ldr	r3, [pc, #572]	; (8000af4 <main_fsm+0x2cc>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	2b01      	cmp	r3, #1
 80008ba:	d119      	bne.n	80008f0 <main_fsm+0xc8>
				setTimer2(AMBER_TIME);
 80008bc:	4b8e      	ldr	r3, [pc, #568]	; (8000af8 <main_fsm+0x2d0>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4618      	mov	r0, r3
 80008c2:	f000 fc5d 	bl	8001180 <setTimer2>
				counter2 = AMBER_TIME/100;
 80008c6:	4b8c      	ldr	r3, [pc, #560]	; (8000af8 <main_fsm+0x2d0>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	4a87      	ldr	r2, [pc, #540]	; (8000ae8 <main_fsm+0x2c0>)
 80008cc:	fb82 1203 	smull	r1, r2, r2, r3
 80008d0:	1152      	asrs	r2, r2, #5
 80008d2:	17db      	asrs	r3, r3, #31
 80008d4:	1ad3      	subs	r3, r2, r3
 80008d6:	4a86      	ldr	r2, [pc, #536]	; (8000af0 <main_fsm+0x2c8>)
 80008d8:	6013      	str	r3, [r2, #0]
				updateBuffer7SEG(counter1, counter2);
 80008da:	4b84      	ldr	r3, [pc, #528]	; (8000aec <main_fsm+0x2c4>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4a84      	ldr	r2, [pc, #528]	; (8000af0 <main_fsm+0x2c8>)
 80008e0:	6812      	ldr	r2, [r2, #0]
 80008e2:	4611      	mov	r1, r2
 80008e4:	4618      	mov	r0, r3
 80008e6:	f7ff fea1 	bl	800062c <updateBuffer7SEG>
				status = RED_AMBER;
 80008ea:	4b7c      	ldr	r3, [pc, #496]	; (8000adc <main_fsm+0x2b4>)
 80008ec:	2203      	movs	r2, #3
 80008ee:	601a      	str	r2, [r3, #0]
			}
			if(isButton1Pressed() == 1) {
 80008f0:	f7ff fcee 	bl	80002d0 <isButton1Pressed>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b01      	cmp	r3, #1
 80008f8:	f040 81f0 	bne.w	8000cdc <main_fsm+0x4b4>
				normalToMode2();
 80008fc:	f7ff ff52 	bl	80007a4 <normalToMode2>
			}
			break;
 8000900:	e1ec      	b.n	8000cdc <main_fsm+0x4b4>
		case RED_AMBER:
			setLedOnWay1(RED_LED);
 8000902:	200a      	movs	r0, #10
 8000904:	f000 fa16 	bl	8000d34 <setLedOnWay1>
			setLedOnWay2(AMBER_LED);
 8000908:	200b      	movs	r0, #11
 800090a:	f000 fa41 	bl	8000d90 <setLedOnWay2>
			if(timer2_flag == 1) {
 800090e:	4b79      	ldr	r3, [pc, #484]	; (8000af4 <main_fsm+0x2cc>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	2b01      	cmp	r3, #1
 8000914:	d123      	bne.n	800095e <main_fsm+0x136>
				setTimer2(GREEN_TIME);
 8000916:	4b72      	ldr	r3, [pc, #456]	; (8000ae0 <main_fsm+0x2b8>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	4618      	mov	r0, r3
 800091c:	f000 fc30 	bl	8001180 <setTimer2>
				counter1 = GREEN_TIME/100;
 8000920:	4b6f      	ldr	r3, [pc, #444]	; (8000ae0 <main_fsm+0x2b8>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a70      	ldr	r2, [pc, #448]	; (8000ae8 <main_fsm+0x2c0>)
 8000926:	fb82 1203 	smull	r1, r2, r2, r3
 800092a:	1152      	asrs	r2, r2, #5
 800092c:	17db      	asrs	r3, r3, #31
 800092e:	1ad3      	subs	r3, r2, r3
 8000930:	4a6e      	ldr	r2, [pc, #440]	; (8000aec <main_fsm+0x2c4>)
 8000932:	6013      	str	r3, [r2, #0]
				counter2 = RED_TIME/100;
 8000934:	4b6b      	ldr	r3, [pc, #428]	; (8000ae4 <main_fsm+0x2bc>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a6b      	ldr	r2, [pc, #428]	; (8000ae8 <main_fsm+0x2c0>)
 800093a:	fb82 1203 	smull	r1, r2, r2, r3
 800093e:	1152      	asrs	r2, r2, #5
 8000940:	17db      	asrs	r3, r3, #31
 8000942:	1ad3      	subs	r3, r2, r3
 8000944:	4a6a      	ldr	r2, [pc, #424]	; (8000af0 <main_fsm+0x2c8>)
 8000946:	6013      	str	r3, [r2, #0]
				updateBuffer7SEG(counter1, counter2);
 8000948:	4b68      	ldr	r3, [pc, #416]	; (8000aec <main_fsm+0x2c4>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a68      	ldr	r2, [pc, #416]	; (8000af0 <main_fsm+0x2c8>)
 800094e:	6812      	ldr	r2, [r2, #0]
 8000950:	4611      	mov	r1, r2
 8000952:	4618      	mov	r0, r3
 8000954:	f7ff fe6a 	bl	800062c <updateBuffer7SEG>
				status = GREEN_RED;
 8000958:	4b60      	ldr	r3, [pc, #384]	; (8000adc <main_fsm+0x2b4>)
 800095a:	2204      	movs	r2, #4
 800095c:	601a      	str	r2, [r3, #0]
			}
			if(isButton1Pressed() == 1) {
 800095e:	f7ff fcb7 	bl	80002d0 <isButton1Pressed>
 8000962:	4603      	mov	r3, r0
 8000964:	2b01      	cmp	r3, #1
 8000966:	f040 81bb 	bne.w	8000ce0 <main_fsm+0x4b8>
				normalToMode2();
 800096a:	f7ff ff1b 	bl	80007a4 <normalToMode2>
			}
			break;
 800096e:	e1b7      	b.n	8000ce0 <main_fsm+0x4b8>
		case GREEN_RED:
			setLedOnWay1(GREEN_LED);
 8000970:	200c      	movs	r0, #12
 8000972:	f000 f9df 	bl	8000d34 <setLedOnWay1>
			setLedOnWay2(RED_LED);
 8000976:	200a      	movs	r0, #10
 8000978:	f000 fa0a 	bl	8000d90 <setLedOnWay2>
			if(timer2_flag == 1) {
 800097c:	4b5d      	ldr	r3, [pc, #372]	; (8000af4 <main_fsm+0x2cc>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	2b01      	cmp	r3, #1
 8000982:	d119      	bne.n	80009b8 <main_fsm+0x190>
				setTimer2(AMBER_TIME);
 8000984:	4b5c      	ldr	r3, [pc, #368]	; (8000af8 <main_fsm+0x2d0>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4618      	mov	r0, r3
 800098a:	f000 fbf9 	bl	8001180 <setTimer2>
				counter1 = AMBER_TIME/100;
 800098e:	4b5a      	ldr	r3, [pc, #360]	; (8000af8 <main_fsm+0x2d0>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	4a55      	ldr	r2, [pc, #340]	; (8000ae8 <main_fsm+0x2c0>)
 8000994:	fb82 1203 	smull	r1, r2, r2, r3
 8000998:	1152      	asrs	r2, r2, #5
 800099a:	17db      	asrs	r3, r3, #31
 800099c:	1ad3      	subs	r3, r2, r3
 800099e:	4a53      	ldr	r2, [pc, #332]	; (8000aec <main_fsm+0x2c4>)
 80009a0:	6013      	str	r3, [r2, #0]
				updateBuffer7SEG(counter1, counter2);
 80009a2:	4b52      	ldr	r3, [pc, #328]	; (8000aec <main_fsm+0x2c4>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	4a52      	ldr	r2, [pc, #328]	; (8000af0 <main_fsm+0x2c8>)
 80009a8:	6812      	ldr	r2, [r2, #0]
 80009aa:	4611      	mov	r1, r2
 80009ac:	4618      	mov	r0, r3
 80009ae:	f7ff fe3d 	bl	800062c <updateBuffer7SEG>
				status = AMBER_RED;
 80009b2:	4b4a      	ldr	r3, [pc, #296]	; (8000adc <main_fsm+0x2b4>)
 80009b4:	2205      	movs	r2, #5
 80009b6:	601a      	str	r2, [r3, #0]
			}
			if(isButton1Pressed() == 1) {
 80009b8:	f7ff fc8a 	bl	80002d0 <isButton1Pressed>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b01      	cmp	r3, #1
 80009c0:	f040 8190 	bne.w	8000ce4 <main_fsm+0x4bc>
				normalToMode2();
 80009c4:	f7ff feee 	bl	80007a4 <normalToMode2>
			}
			break;
 80009c8:	e18c      	b.n	8000ce4 <main_fsm+0x4bc>
		case AMBER_RED:
			setLedOnWay1(AMBER_LED);
 80009ca:	200b      	movs	r0, #11
 80009cc:	f000 f9b2 	bl	8000d34 <setLedOnWay1>
			setLedOnWay2(RED_LED);
 80009d0:	200a      	movs	r0, #10
 80009d2:	f000 f9dd 	bl	8000d90 <setLedOnWay2>
			if(timer2_flag == 1) {
 80009d6:	4b47      	ldr	r3, [pc, #284]	; (8000af4 <main_fsm+0x2cc>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	2b01      	cmp	r3, #1
 80009dc:	d123      	bne.n	8000a26 <main_fsm+0x1fe>
				setTimer2(GREEN_TIME);
 80009de:	4b40      	ldr	r3, [pc, #256]	; (8000ae0 <main_fsm+0x2b8>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4618      	mov	r0, r3
 80009e4:	f000 fbcc 	bl	8001180 <setTimer2>
				counter1 = RED_TIME/100;
 80009e8:	4b3e      	ldr	r3, [pc, #248]	; (8000ae4 <main_fsm+0x2bc>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a3e      	ldr	r2, [pc, #248]	; (8000ae8 <main_fsm+0x2c0>)
 80009ee:	fb82 1203 	smull	r1, r2, r2, r3
 80009f2:	1152      	asrs	r2, r2, #5
 80009f4:	17db      	asrs	r3, r3, #31
 80009f6:	1ad3      	subs	r3, r2, r3
 80009f8:	4a3c      	ldr	r2, [pc, #240]	; (8000aec <main_fsm+0x2c4>)
 80009fa:	6013      	str	r3, [r2, #0]
				counter2 = GREEN_TIME/100;
 80009fc:	4b38      	ldr	r3, [pc, #224]	; (8000ae0 <main_fsm+0x2b8>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a39      	ldr	r2, [pc, #228]	; (8000ae8 <main_fsm+0x2c0>)
 8000a02:	fb82 1203 	smull	r1, r2, r2, r3
 8000a06:	1152      	asrs	r2, r2, #5
 8000a08:	17db      	asrs	r3, r3, #31
 8000a0a:	1ad3      	subs	r3, r2, r3
 8000a0c:	4a38      	ldr	r2, [pc, #224]	; (8000af0 <main_fsm+0x2c8>)
 8000a0e:	6013      	str	r3, [r2, #0]
				updateBuffer7SEG(counter1, counter2);
 8000a10:	4b36      	ldr	r3, [pc, #216]	; (8000aec <main_fsm+0x2c4>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a36      	ldr	r2, [pc, #216]	; (8000af0 <main_fsm+0x2c8>)
 8000a16:	6812      	ldr	r2, [r2, #0]
 8000a18:	4611      	mov	r1, r2
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f7ff fe06 	bl	800062c <updateBuffer7SEG>
				status = RED_GREEN;
 8000a20:	4b2e      	ldr	r3, [pc, #184]	; (8000adc <main_fsm+0x2b4>)
 8000a22:	2202      	movs	r2, #2
 8000a24:	601a      	str	r2, [r3, #0]
			}
			if(isButton1Pressed() == 1) {
 8000a26:	f7ff fc53 	bl	80002d0 <isButton1Pressed>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b01      	cmp	r3, #1
 8000a2e:	f040 815b 	bne.w	8000ce8 <main_fsm+0x4c0>
				normalToMode2();
 8000a32:	f7ff feb7 	bl	80007a4 <normalToMode2>
			}
			break;
 8000a36:	e157      	b.n	8000ce8 <main_fsm+0x4c0>
		case INC_RED:							//Mode 2
			red_led_blinky();
 8000a38:	f7ff fb88 	bl	800014c <red_led_blinky>
			updateBuffer7SEG(2, RED_TIME/100);
 8000a3c:	4b29      	ldr	r3, [pc, #164]	; (8000ae4 <main_fsm+0x2bc>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a29      	ldr	r2, [pc, #164]	; (8000ae8 <main_fsm+0x2c0>)
 8000a42:	fb82 1203 	smull	r1, r2, r2, r3
 8000a46:	1152      	asrs	r2, r2, #5
 8000a48:	17db      	asrs	r3, r3, #31
 8000a4a:	1ad3      	subs	r3, r2, r3
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	2002      	movs	r0, #2
 8000a50:	f7ff fdec 	bl	800062c <updateBuffer7SEG>
			if(isButton1Pressed() == 1){
 8000a54:	f7ff fc3c 	bl	80002d0 <isButton1Pressed>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d116      	bne.n	8000a8c <main_fsm+0x264>
				if(flag_red_change == 0){
 8000a5e:	4b27      	ldr	r3, [pc, #156]	; (8000afc <main_fsm+0x2d4>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d103      	bne.n	8000a6e <main_fsm+0x246>
					RED_TIME = RED_OLD_TIME;
 8000a66:	4b26      	ldr	r3, [pc, #152]	; (8000b00 <main_fsm+0x2d8>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4a1e      	ldr	r2, [pc, #120]	; (8000ae4 <main_fsm+0x2bc>)
 8000a6c:	6013      	str	r3, [r2, #0]
				}
				flag_red_change = 0;
 8000a6e:	4b23      	ldr	r3, [pc, #140]	; (8000afc <main_fsm+0x2d4>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
				clearAllLed();
 8000a74:	f000 f9ba 	bl	8000dec <clearAllLed>
				setTimer4(25);
 8000a78:	2019      	movs	r0, #25
 8000a7a:	f000 fb9f 	bl	80011bc <setTimer4>
				status = INC_AMBER;
 8000a7e:	4b17      	ldr	r3, [pc, #92]	; (8000adc <main_fsm+0x2b4>)
 8000a80:	2207      	movs	r2, #7
 8000a82:	601a      	str	r2, [r3, #0]
				AMBER_OLD_TIME = AMBER_TIME;
 8000a84:	4b1c      	ldr	r3, [pc, #112]	; (8000af8 <main_fsm+0x2d0>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a1e      	ldr	r2, [pc, #120]	; (8000b04 <main_fsm+0x2dc>)
 8000a8a:	6013      	str	r3, [r2, #0]
			}
			if(isButton2Pressed() == 1){
 8000a8c:	f7ff fc32 	bl	80002f4 <isButton2Pressed>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b01      	cmp	r3, #1
 8000a94:	d118      	bne.n	8000ac8 <main_fsm+0x2a0>
				if(flag_red_change == 1){
 8000a96:	4b19      	ldr	r3, [pc, #100]	; (8000afc <main_fsm+0x2d4>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	2b01      	cmp	r3, #1
 8000a9c:	d106      	bne.n	8000aac <main_fsm+0x284>
					RED_OLD_TIME = RED_TIME;
 8000a9e:	4b11      	ldr	r3, [pc, #68]	; (8000ae4 <main_fsm+0x2bc>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4a17      	ldr	r2, [pc, #92]	; (8000b00 <main_fsm+0x2d8>)
 8000aa4:	6013      	str	r3, [r2, #0]
					flag_red_change = 0;
 8000aa6:	4b15      	ldr	r3, [pc, #84]	; (8000afc <main_fsm+0x2d4>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
				}
				RED_TIME += 100;
 8000aac:	4b0d      	ldr	r3, [pc, #52]	; (8000ae4 <main_fsm+0x2bc>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	3364      	adds	r3, #100	; 0x64
 8000ab2:	4a0c      	ldr	r2, [pc, #48]	; (8000ae4 <main_fsm+0x2bc>)
 8000ab4:	6013      	str	r3, [r2, #0]
				if(RED_TIME >= 10000) RED_TIME = 100;
 8000ab6:	4b0b      	ldr	r3, [pc, #44]	; (8000ae4 <main_fsm+0x2bc>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	f242 720f 	movw	r2, #9999	; 0x270f
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	dd02      	ble.n	8000ac8 <main_fsm+0x2a0>
 8000ac2:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <main_fsm+0x2bc>)
 8000ac4:	2264      	movs	r2, #100	; 0x64
 8000ac6:	601a      	str	r2, [r3, #0]
			}
			if(isButton3Pressed() == 1){
 8000ac8:	f7ff fc26 	bl	8000318 <isButton3Pressed>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b01      	cmp	r3, #1
 8000ad0:	f040 810c 	bne.w	8000cec <main_fsm+0x4c4>
				flag_red_change = 1;
 8000ad4:	4b09      	ldr	r3, [pc, #36]	; (8000afc <main_fsm+0x2d4>)
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	601a      	str	r2, [r3, #0]
			}
			break;
 8000ada:	e107      	b.n	8000cec <main_fsm+0x4c4>
 8000adc:	20000044 	.word	0x20000044
 8000ae0:	20000040 	.word	0x20000040
 8000ae4:	20000038 	.word	0x20000038
 8000ae8:	51eb851f 	.word	0x51eb851f
 8000aec:	20000048 	.word	0x20000048
 8000af0:	2000004c 	.word	0x2000004c
 8000af4:	20000154 	.word	0x20000154
 8000af8:	2000003c 	.word	0x2000003c
 8000afc:	200000ac 	.word	0x200000ac
 8000b00:	2000002c 	.word	0x2000002c
 8000b04:	20000030 	.word	0x20000030
		case INC_AMBER:
			amber_led_blinky();
 8000b08:	f7ff fb54 	bl	80001b4 <amber_led_blinky>
			updateBuffer7SEG(3, AMBER_TIME/100);
 8000b0c:	4b7c      	ldr	r3, [pc, #496]	; (8000d00 <main_fsm+0x4d8>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a7c      	ldr	r2, [pc, #496]	; (8000d04 <main_fsm+0x4dc>)
 8000b12:	fb82 1203 	smull	r1, r2, r2, r3
 8000b16:	1152      	asrs	r2, r2, #5
 8000b18:	17db      	asrs	r3, r3, #31
 8000b1a:	1ad3      	subs	r3, r2, r3
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	2003      	movs	r0, #3
 8000b20:	f7ff fd84 	bl	800062c <updateBuffer7SEG>
			//display mode and time for AMBER_LED
			if(isButton1Pressed() == 1){
 8000b24:	f7ff fbd4 	bl	80002d0 <isButton1Pressed>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b01      	cmp	r3, #1
 8000b2c:	d116      	bne.n	8000b5c <main_fsm+0x334>
				if(flag_yellow_change == 0){
 8000b2e:	4b76      	ldr	r3, [pc, #472]	; (8000d08 <main_fsm+0x4e0>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d103      	bne.n	8000b3e <main_fsm+0x316>
					AMBER_TIME = AMBER_OLD_TIME;
 8000b36:	4b75      	ldr	r3, [pc, #468]	; (8000d0c <main_fsm+0x4e4>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4a71      	ldr	r2, [pc, #452]	; (8000d00 <main_fsm+0x4d8>)
 8000b3c:	6013      	str	r3, [r2, #0]
				}
				flag_yellow_change = 0;
 8000b3e:	4b72      	ldr	r3, [pc, #456]	; (8000d08 <main_fsm+0x4e0>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
				clearAllLed();
 8000b44:	f000 f952 	bl	8000dec <clearAllLed>
				setTimer4(25);
 8000b48:	2019      	movs	r0, #25
 8000b4a:	f000 fb37 	bl	80011bc <setTimer4>
				status = INC_GREEN;
 8000b4e:	4b70      	ldr	r3, [pc, #448]	; (8000d10 <main_fsm+0x4e8>)
 8000b50:	2208      	movs	r2, #8
 8000b52:	601a      	str	r2, [r3, #0]
				GREEN_OLD_TIME = GREEN_TIME;
 8000b54:	4b6f      	ldr	r3, [pc, #444]	; (8000d14 <main_fsm+0x4ec>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a6f      	ldr	r2, [pc, #444]	; (8000d18 <main_fsm+0x4f0>)
 8000b5a:	6013      	str	r3, [r2, #0]
			}
			if(isButton2Pressed() == 1){
 8000b5c:	f7ff fbca 	bl	80002f4 <isButton2Pressed>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b01      	cmp	r3, #1
 8000b64:	d10d      	bne.n	8000b82 <main_fsm+0x35a>
				AMBER_TIME += 100;
 8000b66:	4b66      	ldr	r3, [pc, #408]	; (8000d00 <main_fsm+0x4d8>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	3364      	adds	r3, #100	; 0x64
 8000b6c:	4a64      	ldr	r2, [pc, #400]	; (8000d00 <main_fsm+0x4d8>)
 8000b6e:	6013      	str	r3, [r2, #0]
				if(AMBER_TIME >= 10000) AMBER_TIME = 100;
 8000b70:	4b63      	ldr	r3, [pc, #396]	; (8000d00 <main_fsm+0x4d8>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	f242 720f 	movw	r2, #9999	; 0x270f
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	dd02      	ble.n	8000b82 <main_fsm+0x35a>
 8000b7c:	4b60      	ldr	r3, [pc, #384]	; (8000d00 <main_fsm+0x4d8>)
 8000b7e:	2264      	movs	r2, #100	; 0x64
 8000b80:	601a      	str	r2, [r3, #0]
			}
			if(isButton3Pressed() == 1){
 8000b82:	f7ff fbc9 	bl	8000318 <isButton3Pressed>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b01      	cmp	r3, #1
 8000b8a:	f040 80b1 	bne.w	8000cf0 <main_fsm+0x4c8>
				flag_yellow_change = 1;
 8000b8e:	4b5e      	ldr	r3, [pc, #376]	; (8000d08 <main_fsm+0x4e0>)
 8000b90:	2201      	movs	r2, #1
 8000b92:	601a      	str	r2, [r3, #0]
			}
			break;
 8000b94:	e0ac      	b.n	8000cf0 <main_fsm+0x4c8>
		case INC_GREEN:
			green_led_blinky();
 8000b96:	f7ff fb41 	bl	800021c <green_led_blinky>
			updateBuffer7SEG(4, GREEN_TIME/100);
 8000b9a:	4b5e      	ldr	r3, [pc, #376]	; (8000d14 <main_fsm+0x4ec>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4a59      	ldr	r2, [pc, #356]	; (8000d04 <main_fsm+0x4dc>)
 8000ba0:	fb82 1203 	smull	r1, r2, r2, r3
 8000ba4:	1152      	asrs	r2, r2, #5
 8000ba6:	17db      	asrs	r3, r3, #31
 8000ba8:	1ad3      	subs	r3, r2, r3
 8000baa:	4619      	mov	r1, r3
 8000bac:	2004      	movs	r0, #4
 8000bae:	f7ff fd3d 	bl	800062c <updateBuffer7SEG>

			//display mode and time for GREEN_LED
			if(isButton1Pressed() == 1){
 8000bb2:	f7ff fb8d 	bl	80002d0 <isButton1Pressed>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b01      	cmp	r3, #1
 8000bba:	d136      	bne.n	8000c2a <main_fsm+0x402>
				if(flag_green_change == 0){
 8000bbc:	4b57      	ldr	r3, [pc, #348]	; (8000d1c <main_fsm+0x4f4>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d103      	bne.n	8000bcc <main_fsm+0x3a4>
					GREEN_TIME = GREEN_OLD_TIME;
 8000bc4:	4b54      	ldr	r3, [pc, #336]	; (8000d18 <main_fsm+0x4f0>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a52      	ldr	r2, [pc, #328]	; (8000d14 <main_fsm+0x4ec>)
 8000bca:	6013      	str	r3, [r2, #0]
				}
				flag_green_change = 0;
 8000bcc:	4b53      	ldr	r3, [pc, #332]	; (8000d1c <main_fsm+0x4f4>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	601a      	str	r2, [r3, #0]
				//check valid of time
				if(GREEN_TIME + AMBER_TIME != RED_TIME) {
 8000bd2:	4b50      	ldr	r3, [pc, #320]	; (8000d14 <main_fsm+0x4ec>)
 8000bd4:	681a      	ldr	r2, [r3, #0]
 8000bd6:	4b4a      	ldr	r3, [pc, #296]	; (8000d00 <main_fsm+0x4d8>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	441a      	add	r2, r3
 8000bdc:	4b50      	ldr	r3, [pc, #320]	; (8000d20 <main_fsm+0x4f8>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	429a      	cmp	r2, r3
 8000be2:	d006      	beq.n	8000bf2 <main_fsm+0x3ca>
				//If the time setting is not satisfied,
				//switch to error correction state for 2 seconds to let the user know
					status = TIME_ERROR;
 8000be4:	4b4a      	ldr	r3, [pc, #296]	; (8000d10 <main_fsm+0x4e8>)
 8000be6:	2209      	movs	r2, #9
 8000be8:	601a      	str	r2, [r3, #0]
					setTimer2(200);
 8000bea:	20c8      	movs	r0, #200	; 0xc8
 8000bec:	f000 fac8 	bl	8001180 <setTimer2>
 8000bf0:	e01b      	b.n	8000c2a <main_fsm+0x402>
				}
				else {
					status = RED_GREEN;
 8000bf2:	4b47      	ldr	r3, [pc, #284]	; (8000d10 <main_fsm+0x4e8>)
 8000bf4:	2202      	movs	r2, #2
 8000bf6:	601a      	str	r2, [r3, #0]
					setTimer2(GREEN_TIME);
 8000bf8:	4b46      	ldr	r3, [pc, #280]	; (8000d14 <main_fsm+0x4ec>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f000 fabf 	bl	8001180 <setTimer2>
					counter1 = RED_TIME/100;
 8000c02:	4b47      	ldr	r3, [pc, #284]	; (8000d20 <main_fsm+0x4f8>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4a3f      	ldr	r2, [pc, #252]	; (8000d04 <main_fsm+0x4dc>)
 8000c08:	fb82 1203 	smull	r1, r2, r2, r3
 8000c0c:	1152      	asrs	r2, r2, #5
 8000c0e:	17db      	asrs	r3, r3, #31
 8000c10:	1ad3      	subs	r3, r2, r3
 8000c12:	4a44      	ldr	r2, [pc, #272]	; (8000d24 <main_fsm+0x4fc>)
 8000c14:	6013      	str	r3, [r2, #0]
					counter2 = GREEN_TIME/100;
 8000c16:	4b3f      	ldr	r3, [pc, #252]	; (8000d14 <main_fsm+0x4ec>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4a3a      	ldr	r2, [pc, #232]	; (8000d04 <main_fsm+0x4dc>)
 8000c1c:	fb82 1203 	smull	r1, r2, r2, r3
 8000c20:	1152      	asrs	r2, r2, #5
 8000c22:	17db      	asrs	r3, r3, #31
 8000c24:	1ad3      	subs	r3, r2, r3
 8000c26:	4a40      	ldr	r2, [pc, #256]	; (8000d28 <main_fsm+0x500>)
 8000c28:	6013      	str	r3, [r2, #0]
				}
			}
			if(isButton2Pressed() == 1){
 8000c2a:	f7ff fb63 	bl	80002f4 <isButton2Pressed>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b01      	cmp	r3, #1
 8000c32:	d10d      	bne.n	8000c50 <main_fsm+0x428>
				GREEN_TIME += 100;
 8000c34:	4b37      	ldr	r3, [pc, #220]	; (8000d14 <main_fsm+0x4ec>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	3364      	adds	r3, #100	; 0x64
 8000c3a:	4a36      	ldr	r2, [pc, #216]	; (8000d14 <main_fsm+0x4ec>)
 8000c3c:	6013      	str	r3, [r2, #0]
				if(GREEN_TIME >= 10000) GREEN_TIME = 100;
 8000c3e:	4b35      	ldr	r3, [pc, #212]	; (8000d14 <main_fsm+0x4ec>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f242 720f 	movw	r2, #9999	; 0x270f
 8000c46:	4293      	cmp	r3, r2
 8000c48:	dd02      	ble.n	8000c50 <main_fsm+0x428>
 8000c4a:	4b32      	ldr	r3, [pc, #200]	; (8000d14 <main_fsm+0x4ec>)
 8000c4c:	2264      	movs	r2, #100	; 0x64
 8000c4e:	601a      	str	r2, [r3, #0]
			}
			if(isButton3Pressed() == 1){
 8000c50:	f7ff fb62 	bl	8000318 <isButton3Pressed>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b01      	cmp	r3, #1
 8000c58:	d14c      	bne.n	8000cf4 <main_fsm+0x4cc>
				flag_green_change = 1;
 8000c5a:	4b30      	ldr	r3, [pc, #192]	; (8000d1c <main_fsm+0x4f4>)
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	601a      	str	r2, [r3, #0]
			}
			break;
 8000c60:	e048      	b.n	8000cf4 <main_fsm+0x4cc>
		case TIME_ERROR:
			//all led7SED display 0 for error
			updateBuffer7SEG(0, 0);
 8000c62:	2100      	movs	r1, #0
 8000c64:	2000      	movs	r0, #0
 8000c66:	f7ff fce1 	bl	800062c <updateBuffer7SEG>
			clearAllLed();
 8000c6a:	f000 f8bf 	bl	8000dec <clearAllLed>
			RED_TIME = PRE_NORMAL_RED_TIME;
 8000c6e:	4b2f      	ldr	r3, [pc, #188]	; (8000d2c <main_fsm+0x504>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4a2b      	ldr	r2, [pc, #172]	; (8000d20 <main_fsm+0x4f8>)
 8000c74:	6013      	str	r3, [r2, #0]
			AMBER_TIME = AMBER_OLD_TIME;
 8000c76:	4b25      	ldr	r3, [pc, #148]	; (8000d0c <main_fsm+0x4e4>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4a21      	ldr	r2, [pc, #132]	; (8000d00 <main_fsm+0x4d8>)
 8000c7c:	6013      	str	r3, [r2, #0]
			GREEN_TIME = GREEN_OLD_TIME ;
 8000c7e:	4b26      	ldr	r3, [pc, #152]	; (8000d18 <main_fsm+0x4f0>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4a24      	ldr	r2, [pc, #144]	; (8000d14 <main_fsm+0x4ec>)
 8000c84:	6013      	str	r3, [r2, #0]
			if(timer2_flag == 1) {
 8000c86:	4b2a      	ldr	r3, [pc, #168]	; (8000d30 <main_fsm+0x508>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	2b01      	cmp	r3, #1
 8000c8c:	d134      	bne.n	8000cf8 <main_fsm+0x4d0>
				status = RED_GREEN;
 8000c8e:	4b20      	ldr	r3, [pc, #128]	; (8000d10 <main_fsm+0x4e8>)
 8000c90:	2202      	movs	r2, #2
 8000c92:	601a      	str	r2, [r3, #0]
				setTimer2(GREEN_TIME);
 8000c94:	4b1f      	ldr	r3, [pc, #124]	; (8000d14 <main_fsm+0x4ec>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f000 fa71 	bl	8001180 <setTimer2>
				counter1 = RED_TIME/100;
 8000c9e:	4b20      	ldr	r3, [pc, #128]	; (8000d20 <main_fsm+0x4f8>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4a18      	ldr	r2, [pc, #96]	; (8000d04 <main_fsm+0x4dc>)
 8000ca4:	fb82 1203 	smull	r1, r2, r2, r3
 8000ca8:	1152      	asrs	r2, r2, #5
 8000caa:	17db      	asrs	r3, r3, #31
 8000cac:	1ad3      	subs	r3, r2, r3
 8000cae:	4a1d      	ldr	r2, [pc, #116]	; (8000d24 <main_fsm+0x4fc>)
 8000cb0:	6013      	str	r3, [r2, #0]
				counter2 = GREEN_TIME/100;
 8000cb2:	4b18      	ldr	r3, [pc, #96]	; (8000d14 <main_fsm+0x4ec>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4a13      	ldr	r2, [pc, #76]	; (8000d04 <main_fsm+0x4dc>)
 8000cb8:	fb82 1203 	smull	r1, r2, r2, r3
 8000cbc:	1152      	asrs	r2, r2, #5
 8000cbe:	17db      	asrs	r3, r3, #31
 8000cc0:	1ad3      	subs	r3, r2, r3
 8000cc2:	4a19      	ldr	r2, [pc, #100]	; (8000d28 <main_fsm+0x500>)
 8000cc4:	6013      	str	r3, [r2, #0]
				updateBuffer7SEG(counter1, counter2);
 8000cc6:	4b17      	ldr	r3, [pc, #92]	; (8000d24 <main_fsm+0x4fc>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4a17      	ldr	r2, [pc, #92]	; (8000d28 <main_fsm+0x500>)
 8000ccc:	6812      	ldr	r2, [r2, #0]
 8000cce:	4611      	mov	r1, r2
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f7ff fcab 	bl	800062c <updateBuffer7SEG>
}
			break;
 8000cd6:	e00f      	b.n	8000cf8 <main_fsm+0x4d0>
		default:
			break;
 8000cd8:	bf00      	nop
 8000cda:	e00e      	b.n	8000cfa <main_fsm+0x4d2>
			break;
 8000cdc:	bf00      	nop
 8000cde:	e00c      	b.n	8000cfa <main_fsm+0x4d2>
			break;
 8000ce0:	bf00      	nop
 8000ce2:	e00a      	b.n	8000cfa <main_fsm+0x4d2>
			break;
 8000ce4:	bf00      	nop
 8000ce6:	e008      	b.n	8000cfa <main_fsm+0x4d2>
			break;
 8000ce8:	bf00      	nop
 8000cea:	e006      	b.n	8000cfa <main_fsm+0x4d2>
			break;
 8000cec:	bf00      	nop
 8000cee:	e004      	b.n	8000cfa <main_fsm+0x4d2>
			break;
 8000cf0:	bf00      	nop
 8000cf2:	e002      	b.n	8000cfa <main_fsm+0x4d2>
			break;
 8000cf4:	bf00      	nop
 8000cf6:	e000      	b.n	8000cfa <main_fsm+0x4d2>
			break;
 8000cf8:	bf00      	nop
		}

}
 8000cfa:	bf00      	nop
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	2000003c 	.word	0x2000003c
 8000d04:	51eb851f 	.word	0x51eb851f
 8000d08:	200000b0 	.word	0x200000b0
 8000d0c:	20000030 	.word	0x20000030
 8000d10:	20000044 	.word	0x20000044
 8000d14:	20000040 	.word	0x20000040
 8000d18:	20000034 	.word	0x20000034
 8000d1c:	200000b4 	.word	0x200000b4
 8000d20:	20000038 	.word	0x20000038
 8000d24:	20000048 	.word	0x20000048
 8000d28:	2000004c 	.word	0x2000004c
 8000d2c:	20000020 	.word	0x20000020
 8000d30:	20000154 	.word	0x20000154

08000d34 <setLedOnWay1>:
 *      Author: PC
 */

#include "led_control.h"

void setLedOnWay1(int led) {
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, led==RED_LED?RESET:SET);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2b0a      	cmp	r3, #10
 8000d40:	bf14      	ite	ne
 8000d42:	2301      	movne	r3, #1
 8000d44:	2300      	moveq	r3, #0
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	461a      	mov	r2, r3
 8000d4a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d4e:	480f      	ldr	r0, [pc, #60]	; (8000d8c <setLedOnWay1+0x58>)
 8000d50:	f000 fe95 	bl	8001a7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_0_GPIO_Port, LED_YELLOW_0_Pin, led==AMBER_LED?RESET:SET);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2b0b      	cmp	r3, #11
 8000d58:	bf14      	ite	ne
 8000d5a:	2301      	movne	r3, #1
 8000d5c:	2300      	moveq	r3, #0
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	461a      	mov	r2, r3
 8000d62:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d66:	4809      	ldr	r0, [pc, #36]	; (8000d8c <setLedOnWay1+0x58>)
 8000d68:	f000 fe89 	bl	8001a7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, led==GREEN_LED?RESET:SET);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2b0c      	cmp	r3, #12
 8000d70:	bf14      	ite	ne
 8000d72:	2301      	movne	r3, #1
 8000d74:	2300      	moveq	r3, #0
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	461a      	mov	r2, r3
 8000d7a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d7e:	4803      	ldr	r0, [pc, #12]	; (8000d8c <setLedOnWay1+0x58>)
 8000d80:	f000 fe7d 	bl	8001a7e <HAL_GPIO_WritePin>
}
 8000d84:	bf00      	nop
 8000d86:	3708      	adds	r7, #8
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	40010800 	.word	0x40010800

08000d90 <setLedOnWay2>:
void setLedOnWay2(int led) {
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, led==RED_LED?RESET:SET);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2b0a      	cmp	r3, #10
 8000d9c:	bf14      	ite	ne
 8000d9e:	2301      	movne	r3, #1
 8000da0:	2300      	moveq	r3, #0
 8000da2:	b2db      	uxtb	r3, r3
 8000da4:	461a      	mov	r2, r3
 8000da6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000daa:	480f      	ldr	r0, [pc, #60]	; (8000de8 <setLedOnWay2+0x58>)
 8000dac:	f000 fe67 	bl	8001a7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, led==AMBER_LED?RESET:SET);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2b0b      	cmp	r3, #11
 8000db4:	bf14      	ite	ne
 8000db6:	2301      	movne	r3, #1
 8000db8:	2300      	moveq	r3, #0
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dc2:	4809      	ldr	r0, [pc, #36]	; (8000de8 <setLedOnWay2+0x58>)
 8000dc4:	f000 fe5b 	bl	8001a7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, led==GREEN_LED?RESET:SET);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2b0c      	cmp	r3, #12
 8000dcc:	bf14      	ite	ne
 8000dce:	2301      	movne	r3, #1
 8000dd0:	2300      	moveq	r3, #0
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000dda:	4803      	ldr	r0, [pc, #12]	; (8000de8 <setLedOnWay2+0x58>)
 8000ddc:	f000 fe4f 	bl	8001a7e <HAL_GPIO_WritePin>

}
 8000de0:	bf00      	nop
 8000de2:	3708      	adds	r7, #8
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	40010800 	.word	0x40010800

08000dec <clearAllLed>:

void clearAllLed() {
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, SET);
 8000df0:	2201      	movs	r2, #1
 8000df2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000df6:	4811      	ldr	r0, [pc, #68]	; (8000e3c <clearAllLed+0x50>)
 8000df8:	f000 fe41 	bl	8001a7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, SET);
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e02:	480e      	ldr	r0, [pc, #56]	; (8000e3c <clearAllLed+0x50>)
 8000e04:	f000 fe3b 	bl	8001a7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_0_GPIO_Port, LED_YELLOW_0_Pin, SET);
 8000e08:	2201      	movs	r2, #1
 8000e0a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e0e:	480b      	ldr	r0, [pc, #44]	; (8000e3c <clearAllLed+0x50>)
 8000e10:	f000 fe35 	bl	8001a7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, SET);
 8000e14:	2201      	movs	r2, #1
 8000e16:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e1a:	4808      	ldr	r0, [pc, #32]	; (8000e3c <clearAllLed+0x50>)
 8000e1c:	f000 fe2f 	bl	8001a7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, SET);
 8000e20:	2201      	movs	r2, #1
 8000e22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e26:	4805      	ldr	r0, [pc, #20]	; (8000e3c <clearAllLed+0x50>)
 8000e28:	f000 fe29 	bl	8001a7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, SET);
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e32:	4802      	ldr	r0, [pc, #8]	; (8000e3c <clearAllLed+0x50>)
 8000e34:	f000 fe23 	bl	8001a7e <HAL_GPIO_WritePin>
}
 8000e38:	bf00      	nop
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	40010800 	.word	0x40010800

08000e40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e44:	f000 fb18 	bl	8001478 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e48:	f000 f832 	bl	8000eb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e4c:	f000 f906 	bl	800105c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000e50:	f000 f86a 	bl	8000f28 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000e54:	f000 f8b4 	bl	8000fc0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000e58:	4811      	ldr	r0, [pc, #68]	; (8000ea0 <main+0x60>)
 8000e5a:	f001 fa6f 	bl	800233c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  setTimer1(100);
 8000e5e:	2064      	movs	r0, #100	; 0x64
 8000e60:	f000 f970 	bl	8001144 <setTimer1>
  frequency = 8000000/((htim2.Init.Period+1)*(htim2.Init.Prescaler+1));
 8000e64:	4b0e      	ldr	r3, [pc, #56]	; (8000ea0 <main+0x60>)
 8000e66:	68db      	ldr	r3, [r3, #12]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	4a0d      	ldr	r2, [pc, #52]	; (8000ea0 <main+0x60>)
 8000e6c:	6852      	ldr	r2, [r2, #4]
 8000e6e:	3201      	adds	r2, #1
 8000e70:	fb02 f303 	mul.w	r3, r2, r3
 8000e74:	4a0b      	ldr	r2, [pc, #44]	; (8000ea4 <main+0x64>)
 8000e76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	4b0a      	ldr	r3, [pc, #40]	; (8000ea8 <main+0x68>)
 8000e7e:	601a      	str	r2, [r3, #0]
  TIME_DURATION = 1000/frequency; //ms
 8000e80:	4b09      	ldr	r3, [pc, #36]	; (8000ea8 <main+0x68>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e88:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e8c:	4a07      	ldr	r2, [pc, #28]	; (8000eac <main+0x6c>)
 8000e8e:	6013      	str	r3, [r2, #0]
  while (1)
  {

	  main_fsm();
 8000e90:	f7ff fcca 	bl	8000828 <main_fsm>
	  scan7SEG();
 8000e94:	f7ff fc06 	bl	80006a4 <scan7SEG>
	  count_down();
 8000e98:	f7ff fc94 	bl	80007c4 <count_down>
	  main_fsm();
 8000e9c:	e7f8      	b.n	8000e90 <main+0x50>
 8000e9e:	bf00      	nop
 8000ea0:	200000b8 	.word	0x200000b8
 8000ea4:	007a1200 	.word	0x007a1200
 8000ea8:	20000050 	.word	0x20000050
 8000eac:	20000054 	.word	0x20000054

08000eb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b090      	sub	sp, #64	; 0x40
 8000eb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eb6:	f107 0318 	add.w	r3, r7, #24
 8000eba:	2228      	movs	r2, #40	; 0x28
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f001 fdd4 	bl	8002a6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ec4:	1d3b      	adds	r3, r7, #4
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	605a      	str	r2, [r3, #4]
 8000ecc:	609a      	str	r2, [r3, #8]
 8000ece:	60da      	str	r2, [r3, #12]
 8000ed0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000eda:	2310      	movs	r3, #16
 8000edc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ee2:	f107 0318 	add.w	r3, r7, #24
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f000 fdfa 	bl	8001ae0 <HAL_RCC_OscConfig>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000ef2:	f000 f921 	bl	8001138 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ef6:	230f      	movs	r3, #15
 8000ef8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000efa:	2300      	movs	r3, #0
 8000efc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000efe:	2300      	movs	r3, #0
 8000f00:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f02:	2300      	movs	r3, #0
 8000f04:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f06:	2300      	movs	r3, #0
 8000f08:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f0a:	1d3b      	adds	r3, r7, #4
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f001 f868 	bl	8001fe4 <HAL_RCC_ClockConfig>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000f1a:	f000 f90d 	bl	8001138 <Error_Handler>
  }
}
 8000f1e:	bf00      	nop
 8000f20:	3740      	adds	r7, #64	; 0x40
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
	...

08000f28 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b086      	sub	sp, #24
 8000f2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f2e:	f107 0308 	add.w	r3, r7, #8
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	605a      	str	r2, [r3, #4]
 8000f38:	609a      	str	r2, [r3, #8]
 8000f3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f3c:	463b      	mov	r3, r7
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f44:	4b1d      	ldr	r3, [pc, #116]	; (8000fbc <MX_TIM2_Init+0x94>)
 8000f46:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f4a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000f4c:	4b1b      	ldr	r3, [pc, #108]	; (8000fbc <MX_TIM2_Init+0x94>)
 8000f4e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000f52:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f54:	4b19      	ldr	r3, [pc, #100]	; (8000fbc <MX_TIM2_Init+0x94>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000f5a:	4b18      	ldr	r3, [pc, #96]	; (8000fbc <MX_TIM2_Init+0x94>)
 8000f5c:	2209      	movs	r2, #9
 8000f5e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f60:	4b16      	ldr	r3, [pc, #88]	; (8000fbc <MX_TIM2_Init+0x94>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f66:	4b15      	ldr	r3, [pc, #84]	; (8000fbc <MX_TIM2_Init+0x94>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f6c:	4813      	ldr	r0, [pc, #76]	; (8000fbc <MX_TIM2_Init+0x94>)
 8000f6e:	f001 f995 	bl	800229c <HAL_TIM_Base_Init>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000f78:	f000 f8de 	bl	8001138 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f80:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f82:	f107 0308 	add.w	r3, r7, #8
 8000f86:	4619      	mov	r1, r3
 8000f88:	480c      	ldr	r0, [pc, #48]	; (8000fbc <MX_TIM2_Init+0x94>)
 8000f8a:	f001 fb2b 	bl	80025e4 <HAL_TIM_ConfigClockSource>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000f94:	f000 f8d0 	bl	8001138 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fa0:	463b      	mov	r3, r7
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4805      	ldr	r0, [pc, #20]	; (8000fbc <MX_TIM2_Init+0x94>)
 8000fa6:	f001 fcf7 	bl	8002998 <HAL_TIMEx_MasterConfigSynchronization>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000fb0:	f000 f8c2 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000fb4:	bf00      	nop
 8000fb6:	3718      	adds	r7, #24
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	200000b8 	.word	0x200000b8

08000fc0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b086      	sub	sp, #24
 8000fc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fc6:	f107 0308 	add.w	r3, r7, #8
 8000fca:	2200      	movs	r2, #0
 8000fcc:	601a      	str	r2, [r3, #0]
 8000fce:	605a      	str	r2, [r3, #4]
 8000fd0:	609a      	str	r2, [r3, #8]
 8000fd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fd4:	463b      	mov	r3, r7
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	601a      	str	r2, [r3, #0]
 8000fda:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000fdc:	4b1d      	ldr	r3, [pc, #116]	; (8001054 <MX_TIM3_Init+0x94>)
 8000fde:	4a1e      	ldr	r2, [pc, #120]	; (8001058 <MX_TIM3_Init+0x98>)
 8000fe0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7999;
 8000fe2:	4b1c      	ldr	r3, [pc, #112]	; (8001054 <MX_TIM3_Init+0x94>)
 8000fe4:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000fe8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fea:	4b1a      	ldr	r3, [pc, #104]	; (8001054 <MX_TIM3_Init+0x94>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9;
 8000ff0:	4b18      	ldr	r3, [pc, #96]	; (8001054 <MX_TIM3_Init+0x94>)
 8000ff2:	2209      	movs	r2, #9
 8000ff4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ff6:	4b17      	ldr	r3, [pc, #92]	; (8001054 <MX_TIM3_Init+0x94>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ffc:	4b15      	ldr	r3, [pc, #84]	; (8001054 <MX_TIM3_Init+0x94>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001002:	4814      	ldr	r0, [pc, #80]	; (8001054 <MX_TIM3_Init+0x94>)
 8001004:	f001 f94a 	bl	800229c <HAL_TIM_Base_Init>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800100e:	f000 f893 	bl	8001138 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001012:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001016:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001018:	f107 0308 	add.w	r3, r7, #8
 800101c:	4619      	mov	r1, r3
 800101e:	480d      	ldr	r0, [pc, #52]	; (8001054 <MX_TIM3_Init+0x94>)
 8001020:	f001 fae0 	bl	80025e4 <HAL_TIM_ConfigClockSource>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800102a:	f000 f885 	bl	8001138 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800102e:	2300      	movs	r3, #0
 8001030:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001032:	2300      	movs	r3, #0
 8001034:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001036:	463b      	mov	r3, r7
 8001038:	4619      	mov	r1, r3
 800103a:	4806      	ldr	r0, [pc, #24]	; (8001054 <MX_TIM3_Init+0x94>)
 800103c:	f001 fcac 	bl	8002998 <HAL_TIMEx_MasterConfigSynchronization>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001046:	f000 f877 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800104a:	bf00      	nop
 800104c:	3718      	adds	r7, #24
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	20000100 	.word	0x20000100
 8001058:	40000400 	.word	0x40000400

0800105c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001062:	f107 0308 	add.w	r3, r7, #8
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	605a      	str	r2, [r3, #4]
 800106c:	609a      	str	r2, [r3, #8]
 800106e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001070:	4b28      	ldr	r3, [pc, #160]	; (8001114 <MX_GPIO_Init+0xb8>)
 8001072:	699b      	ldr	r3, [r3, #24]
 8001074:	4a27      	ldr	r2, [pc, #156]	; (8001114 <MX_GPIO_Init+0xb8>)
 8001076:	f043 0304 	orr.w	r3, r3, #4
 800107a:	6193      	str	r3, [r2, #24]
 800107c:	4b25      	ldr	r3, [pc, #148]	; (8001114 <MX_GPIO_Init+0xb8>)
 800107e:	699b      	ldr	r3, [r3, #24]
 8001080:	f003 0304 	and.w	r3, r3, #4
 8001084:	607b      	str	r3, [r7, #4]
 8001086:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001088:	4b22      	ldr	r3, [pc, #136]	; (8001114 <MX_GPIO_Init+0xb8>)
 800108a:	699b      	ldr	r3, [r3, #24]
 800108c:	4a21      	ldr	r2, [pc, #132]	; (8001114 <MX_GPIO_Init+0xb8>)
 800108e:	f043 0308 	orr.w	r3, r3, #8
 8001092:	6193      	str	r3, [r2, #24]
 8001094:	4b1f      	ldr	r3, [pc, #124]	; (8001114 <MX_GPIO_Init+0xb8>)
 8001096:	699b      	ldr	r3, [r3, #24]
 8001098:	f003 0308 	and.w	r3, r3, #8
 800109c:	603b      	str	r3, [r7, #0]
 800109e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SEG_0_Pin|SEG_1_Pin|SEG_2_Pin|SEG_3_Pin
 80010a0:	2200      	movs	r2, #0
 80010a2:	f64f 417f 	movw	r1, #64639	; 0xfc7f
 80010a6:	481c      	ldr	r0, [pc, #112]	; (8001118 <MX_GPIO_Init+0xbc>)
 80010a8:	f000 fce9 	bl	8001a7e <HAL_GPIO_WritePin>
                          |SEG_4_Pin|SEG_5_Pin|SEG_6_Pin|LED_RED_0_Pin
                          |LED_YELLOW_0_Pin|LED_GREEN_0_Pin|LED_RED_1_Pin|LED_YELLOW_1_Pin
                          |LED_GREEN_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN_0_Pin|EN_1_Pin|EN_2_Pin|EN_3_Pin
 80010ac:	2200      	movs	r2, #0
 80010ae:	f44f 413c 	mov.w	r1, #48128	; 0xbc00
 80010b2:	481a      	ldr	r0, [pc, #104]	; (800111c <MX_GPIO_Init+0xc0>)
 80010b4:	f000 fce3 	bl	8001a7e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SEG_0_Pin SEG_1_Pin SEG_2_Pin SEG_3_Pin
                           SEG_4_Pin SEG_5_Pin SEG_6_Pin LED_RED_0_Pin
                           LED_YELLOW_0_Pin LED_GREEN_0_Pin LED_RED_1_Pin LED_YELLOW_1_Pin
                           LED_GREEN_1_Pin */
  GPIO_InitStruct.Pin = SEG_0_Pin|SEG_1_Pin|SEG_2_Pin|SEG_3_Pin
 80010b8:	f64f 437f 	movw	r3, #64639	; 0xfc7f
 80010bc:	60bb      	str	r3, [r7, #8]
                          |SEG_4_Pin|SEG_5_Pin|SEG_6_Pin|LED_RED_0_Pin
                          |LED_YELLOW_0_Pin|LED_GREEN_0_Pin|LED_RED_1_Pin|LED_YELLOW_1_Pin
                          |LED_GREEN_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010be:	2301      	movs	r3, #1
 80010c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c2:	2300      	movs	r3, #0
 80010c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c6:	2302      	movs	r3, #2
 80010c8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ca:	f107 0308 	add.w	r3, r7, #8
 80010ce:	4619      	mov	r1, r3
 80010d0:	4811      	ldr	r0, [pc, #68]	; (8001118 <MX_GPIO_Init+0xbc>)
 80010d2:	f000 fb41 	bl	8001758 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_2_Pin BUTTON_3_Pin PB3 */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin|GPIO_PIN_3;
 80010d6:	230f      	movs	r3, #15
 80010d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010de:	2301      	movs	r3, #1
 80010e0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010e2:	f107 0308 	add.w	r3, r7, #8
 80010e6:	4619      	mov	r1, r3
 80010e8:	480c      	ldr	r0, [pc, #48]	; (800111c <MX_GPIO_Init+0xc0>)
 80010ea:	f000 fb35 	bl	8001758 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_0_Pin EN_1_Pin EN_2_Pin EN_3_Pin
                           LED_TEST_Pin */
  GPIO_InitStruct.Pin = EN_0_Pin|EN_1_Pin|EN_2_Pin|EN_3_Pin
 80010ee:	f44f 433c 	mov.w	r3, #48128	; 0xbc00
 80010f2:	60bb      	str	r3, [r7, #8]
                          |LED_TEST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f4:	2301      	movs	r3, #1
 80010f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f8:	2300      	movs	r3, #0
 80010fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fc:	2302      	movs	r3, #2
 80010fe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001100:	f107 0308 	add.w	r3, r7, #8
 8001104:	4619      	mov	r1, r3
 8001106:	4805      	ldr	r0, [pc, #20]	; (800111c <MX_GPIO_Init+0xc0>)
 8001108:	f000 fb26 	bl	8001758 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800110c:	bf00      	nop
 800110e:	3718      	adds	r7, #24
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	40021000 	.word	0x40021000
 8001118:	40010800 	.word	0x40010800
 800111c:	40010c00 	.word	0x40010c00

08001120 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
	timerRun();
 8001128:	f000 f884 	bl	8001234 <timerRun>
	getKeyInput();
 800112c:	f7ff f92a 	bl	8000384 <getKeyInput>
}
 8001130:	bf00      	nop
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}

08001138 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800113c:	b672      	cpsid	i
}
 800113e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001140:	e7fe      	b.n	8001140 <Error_Handler+0x8>
	...

08001144 <setTimer1>:

int timer5_counter = 0;
int timer5_flag = 0;


void setTimer1(int duration) {
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
	timer1_counter = duration*10/TIME_DURATION;
 800114c:	687a      	ldr	r2, [r7, #4]
 800114e:	4613      	mov	r3, r2
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	4413      	add	r3, r2
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	461a      	mov	r2, r3
 8001158:	4b06      	ldr	r3, [pc, #24]	; (8001174 <setTimer1+0x30>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001160:	4a05      	ldr	r2, [pc, #20]	; (8001178 <setTimer1+0x34>)
 8001162:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8001164:	4b05      	ldr	r3, [pc, #20]	; (800117c <setTimer1+0x38>)
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
}
 800116a:	bf00      	nop
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	bc80      	pop	{r7}
 8001172:	4770      	bx	lr
 8001174:	20000054 	.word	0x20000054
 8001178:	20000148 	.word	0x20000148
 800117c:	2000014c 	.word	0x2000014c

08001180 <setTimer2>:

void setTimer2(int duration) {
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
	timer2_counter = duration*10/TIME_DURATION;
 8001188:	687a      	ldr	r2, [r7, #4]
 800118a:	4613      	mov	r3, r2
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	4413      	add	r3, r2
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	461a      	mov	r2, r3
 8001194:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <setTimer2+0x30>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	fb92 f3f3 	sdiv	r3, r2, r3
 800119c:	4a05      	ldr	r2, [pc, #20]	; (80011b4 <setTimer2+0x34>)
 800119e:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 80011a0:	4b05      	ldr	r3, [pc, #20]	; (80011b8 <setTimer2+0x38>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]
}
 80011a6:	bf00      	nop
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bc80      	pop	{r7}
 80011ae:	4770      	bx	lr
 80011b0:	20000054 	.word	0x20000054
 80011b4:	20000150 	.word	0x20000150
 80011b8:	20000154 	.word	0x20000154

080011bc <setTimer4>:
void setTimer3(int duration) {
	timer3_counter = duration*10/TIME_DURATION;
	timer3_flag = 0;
}

void setTimer4(int duration) {
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
	timer4_counter = duration*10/TIME_DURATION;
 80011c4:	687a      	ldr	r2, [r7, #4]
 80011c6:	4613      	mov	r3, r2
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	4413      	add	r3, r2
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	461a      	mov	r2, r3
 80011d0:	4b06      	ldr	r3, [pc, #24]	; (80011ec <setTimer4+0x30>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	fb92 f3f3 	sdiv	r3, r2, r3
 80011d8:	4a05      	ldr	r2, [pc, #20]	; (80011f0 <setTimer4+0x34>)
 80011da:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 80011dc:	4b05      	ldr	r3, [pc, #20]	; (80011f4 <setTimer4+0x38>)
 80011de:	2200      	movs	r2, #0
 80011e0:	601a      	str	r2, [r3, #0]
}
 80011e2:	bf00      	nop
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bc80      	pop	{r7}
 80011ea:	4770      	bx	lr
 80011ec:	20000054 	.word	0x20000054
 80011f0:	20000160 	.word	0x20000160
 80011f4:	20000164 	.word	0x20000164

080011f8 <setTimer5>:

void setTimer5(int duration) {
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
	timer5_counter = duration*10/TIME_DURATION;
 8001200:	687a      	ldr	r2, [r7, #4]
 8001202:	4613      	mov	r3, r2
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	4413      	add	r3, r2
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	461a      	mov	r2, r3
 800120c:	4b06      	ldr	r3, [pc, #24]	; (8001228 <setTimer5+0x30>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	fb92 f3f3 	sdiv	r3, r2, r3
 8001214:	4a05      	ldr	r2, [pc, #20]	; (800122c <setTimer5+0x34>)
 8001216:	6013      	str	r3, [r2, #0]
	timer5_flag = 0;
 8001218:	4b05      	ldr	r3, [pc, #20]	; (8001230 <setTimer5+0x38>)
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
}
 800121e:	bf00      	nop
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	bc80      	pop	{r7}
 8001226:	4770      	bx	lr
 8001228:	20000054 	.word	0x20000054
 800122c:	20000168 	.word	0x20000168
 8001230:	2000016c 	.word	0x2000016c

08001234 <timerRun>:

void timerRun() {
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
	if(timer1_counter > 0) {
 8001238:	4b29      	ldr	r3, [pc, #164]	; (80012e0 <timerRun+0xac>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2b00      	cmp	r3, #0
 800123e:	dd0b      	ble.n	8001258 <timerRun+0x24>
		timer1_counter--;
 8001240:	4b27      	ldr	r3, [pc, #156]	; (80012e0 <timerRun+0xac>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	3b01      	subs	r3, #1
 8001246:	4a26      	ldr	r2, [pc, #152]	; (80012e0 <timerRun+0xac>)
 8001248:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0) {
 800124a:	4b25      	ldr	r3, [pc, #148]	; (80012e0 <timerRun+0xac>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	2b00      	cmp	r3, #0
 8001250:	dc02      	bgt.n	8001258 <timerRun+0x24>
			timer1_flag = 1;
 8001252:	4b24      	ldr	r3, [pc, #144]	; (80012e4 <timerRun+0xb0>)
 8001254:	2201      	movs	r2, #1
 8001256:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer2_counter > 0) {
 8001258:	4b23      	ldr	r3, [pc, #140]	; (80012e8 <timerRun+0xb4>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2b00      	cmp	r3, #0
 800125e:	dd0b      	ble.n	8001278 <timerRun+0x44>
			timer2_counter--;
 8001260:	4b21      	ldr	r3, [pc, #132]	; (80012e8 <timerRun+0xb4>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	3b01      	subs	r3, #1
 8001266:	4a20      	ldr	r2, [pc, #128]	; (80012e8 <timerRun+0xb4>)
 8001268:	6013      	str	r3, [r2, #0]
			if(timer2_counter <= 0) {
 800126a:	4b1f      	ldr	r3, [pc, #124]	; (80012e8 <timerRun+0xb4>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	2b00      	cmp	r3, #0
 8001270:	dc02      	bgt.n	8001278 <timerRun+0x44>
				timer2_flag = 1;
 8001272:	4b1e      	ldr	r3, [pc, #120]	; (80012ec <timerRun+0xb8>)
 8001274:	2201      	movs	r2, #1
 8001276:	601a      	str	r2, [r3, #0]
			}
		}

	if(timer3_counter > 0) {
 8001278:	4b1d      	ldr	r3, [pc, #116]	; (80012f0 <timerRun+0xbc>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	2b00      	cmp	r3, #0
 800127e:	dd0b      	ble.n	8001298 <timerRun+0x64>
			timer3_counter--;
 8001280:	4b1b      	ldr	r3, [pc, #108]	; (80012f0 <timerRun+0xbc>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	3b01      	subs	r3, #1
 8001286:	4a1a      	ldr	r2, [pc, #104]	; (80012f0 <timerRun+0xbc>)
 8001288:	6013      	str	r3, [r2, #0]
			if(timer3_counter <= 0) {
 800128a:	4b19      	ldr	r3, [pc, #100]	; (80012f0 <timerRun+0xbc>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	2b00      	cmp	r3, #0
 8001290:	dc02      	bgt.n	8001298 <timerRun+0x64>
				timer3_flag = 1;
 8001292:	4b18      	ldr	r3, [pc, #96]	; (80012f4 <timerRun+0xc0>)
 8001294:	2201      	movs	r2, #1
 8001296:	601a      	str	r2, [r3, #0]
			}
		}

	if(timer4_counter > 0) {
 8001298:	4b17      	ldr	r3, [pc, #92]	; (80012f8 <timerRun+0xc4>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2b00      	cmp	r3, #0
 800129e:	dd0b      	ble.n	80012b8 <timerRun+0x84>
			timer4_counter--;
 80012a0:	4b15      	ldr	r3, [pc, #84]	; (80012f8 <timerRun+0xc4>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	3b01      	subs	r3, #1
 80012a6:	4a14      	ldr	r2, [pc, #80]	; (80012f8 <timerRun+0xc4>)
 80012a8:	6013      	str	r3, [r2, #0]
			if(timer4_counter <= 0) {
 80012aa:	4b13      	ldr	r3, [pc, #76]	; (80012f8 <timerRun+0xc4>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	dc02      	bgt.n	80012b8 <timerRun+0x84>
				timer4_flag = 1;
 80012b2:	4b12      	ldr	r3, [pc, #72]	; (80012fc <timerRun+0xc8>)
 80012b4:	2201      	movs	r2, #1
 80012b6:	601a      	str	r2, [r3, #0]
			}
		}

	if(timer5_counter > 0) {
 80012b8:	4b11      	ldr	r3, [pc, #68]	; (8001300 <timerRun+0xcc>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	dd0b      	ble.n	80012d8 <timerRun+0xa4>
			timer5_counter--;
 80012c0:	4b0f      	ldr	r3, [pc, #60]	; (8001300 <timerRun+0xcc>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	3b01      	subs	r3, #1
 80012c6:	4a0e      	ldr	r2, [pc, #56]	; (8001300 <timerRun+0xcc>)
 80012c8:	6013      	str	r3, [r2, #0]
			if(timer5_counter <= 0) {
 80012ca:	4b0d      	ldr	r3, [pc, #52]	; (8001300 <timerRun+0xcc>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	dc02      	bgt.n	80012d8 <timerRun+0xa4>
				timer5_flag = 1;
 80012d2:	4b0c      	ldr	r3, [pc, #48]	; (8001304 <timerRun+0xd0>)
 80012d4:	2201      	movs	r2, #1
 80012d6:	601a      	str	r2, [r3, #0]
			}
		}
}
 80012d8:	bf00      	nop
 80012da:	46bd      	mov	sp, r7
 80012dc:	bc80      	pop	{r7}
 80012de:	4770      	bx	lr
 80012e0:	20000148 	.word	0x20000148
 80012e4:	2000014c 	.word	0x2000014c
 80012e8:	20000150 	.word	0x20000150
 80012ec:	20000154 	.word	0x20000154
 80012f0:	20000158 	.word	0x20000158
 80012f4:	2000015c 	.word	0x2000015c
 80012f8:	20000160 	.word	0x20000160
 80012fc:	20000164 	.word	0x20000164
 8001300:	20000168 	.word	0x20000168
 8001304:	2000016c 	.word	0x2000016c

08001308 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800130e:	4b0e      	ldr	r3, [pc, #56]	; (8001348 <HAL_MspInit+0x40>)
 8001310:	699b      	ldr	r3, [r3, #24]
 8001312:	4a0d      	ldr	r2, [pc, #52]	; (8001348 <HAL_MspInit+0x40>)
 8001314:	f043 0301 	orr.w	r3, r3, #1
 8001318:	6193      	str	r3, [r2, #24]
 800131a:	4b0b      	ldr	r3, [pc, #44]	; (8001348 <HAL_MspInit+0x40>)
 800131c:	699b      	ldr	r3, [r3, #24]
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	607b      	str	r3, [r7, #4]
 8001324:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001326:	4b08      	ldr	r3, [pc, #32]	; (8001348 <HAL_MspInit+0x40>)
 8001328:	69db      	ldr	r3, [r3, #28]
 800132a:	4a07      	ldr	r2, [pc, #28]	; (8001348 <HAL_MspInit+0x40>)
 800132c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001330:	61d3      	str	r3, [r2, #28]
 8001332:	4b05      	ldr	r3, [pc, #20]	; (8001348 <HAL_MspInit+0x40>)
 8001334:	69db      	ldr	r3, [r3, #28]
 8001336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800133a:	603b      	str	r3, [r7, #0]
 800133c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800133e:	bf00      	nop
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	bc80      	pop	{r7}
 8001346:	4770      	bx	lr
 8001348:	40021000 	.word	0x40021000

0800134c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800135c:	d114      	bne.n	8001388 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800135e:	4b15      	ldr	r3, [pc, #84]	; (80013b4 <HAL_TIM_Base_MspInit+0x68>)
 8001360:	69db      	ldr	r3, [r3, #28]
 8001362:	4a14      	ldr	r2, [pc, #80]	; (80013b4 <HAL_TIM_Base_MspInit+0x68>)
 8001364:	f043 0301 	orr.w	r3, r3, #1
 8001368:	61d3      	str	r3, [r2, #28]
 800136a:	4b12      	ldr	r3, [pc, #72]	; (80013b4 <HAL_TIM_Base_MspInit+0x68>)
 800136c:	69db      	ldr	r3, [r3, #28]
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001376:	2200      	movs	r2, #0
 8001378:	2100      	movs	r1, #0
 800137a:	201c      	movs	r0, #28
 800137c:	f000 f9b5 	bl	80016ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001380:	201c      	movs	r0, #28
 8001382:	f000 f9ce 	bl	8001722 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001386:	e010      	b.n	80013aa <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a0a      	ldr	r2, [pc, #40]	; (80013b8 <HAL_TIM_Base_MspInit+0x6c>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d10b      	bne.n	80013aa <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001392:	4b08      	ldr	r3, [pc, #32]	; (80013b4 <HAL_TIM_Base_MspInit+0x68>)
 8001394:	69db      	ldr	r3, [r3, #28]
 8001396:	4a07      	ldr	r2, [pc, #28]	; (80013b4 <HAL_TIM_Base_MspInit+0x68>)
 8001398:	f043 0302 	orr.w	r3, r3, #2
 800139c:	61d3      	str	r3, [r2, #28]
 800139e:	4b05      	ldr	r3, [pc, #20]	; (80013b4 <HAL_TIM_Base_MspInit+0x68>)
 80013a0:	69db      	ldr	r3, [r3, #28]
 80013a2:	f003 0302 	and.w	r3, r3, #2
 80013a6:	60bb      	str	r3, [r7, #8]
 80013a8:	68bb      	ldr	r3, [r7, #8]
}
 80013aa:	bf00      	nop
 80013ac:	3710      	adds	r7, #16
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	40021000 	.word	0x40021000
 80013b8:	40000400 	.word	0x40000400

080013bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013c0:	e7fe      	b.n	80013c0 <NMI_Handler+0x4>

080013c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013c2:	b480      	push	{r7}
 80013c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013c6:	e7fe      	b.n	80013c6 <HardFault_Handler+0x4>

080013c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013cc:	e7fe      	b.n	80013cc <MemManage_Handler+0x4>

080013ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ce:	b480      	push	{r7}
 80013d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013d2:	e7fe      	b.n	80013d2 <BusFault_Handler+0x4>

080013d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013d8:	e7fe      	b.n	80013d8 <UsageFault_Handler+0x4>

080013da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013da:	b480      	push	{r7}
 80013dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013de:	bf00      	nop
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bc80      	pop	{r7}
 80013e4:	4770      	bx	lr

080013e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013e6:	b480      	push	{r7}
 80013e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013ea:	bf00      	nop
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bc80      	pop	{r7}
 80013f0:	4770      	bx	lr

080013f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013f2:	b480      	push	{r7}
 80013f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013f6:	bf00      	nop
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bc80      	pop	{r7}
 80013fc:	4770      	bx	lr

080013fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001402:	f000 f87f 	bl	8001504 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
	...

0800140c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001410:	4802      	ldr	r0, [pc, #8]	; (800141c <TIM2_IRQHandler+0x10>)
 8001412:	f000 ffdf 	bl	80023d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001416:	bf00      	nop
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	200000b8 	.word	0x200000b8

08001420 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001424:	bf00      	nop
 8001426:	46bd      	mov	sp, r7
 8001428:	bc80      	pop	{r7}
 800142a:	4770      	bx	lr

0800142c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800142c:	f7ff fff8 	bl	8001420 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001430:	480b      	ldr	r0, [pc, #44]	; (8001460 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001432:	490c      	ldr	r1, [pc, #48]	; (8001464 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001434:	4a0c      	ldr	r2, [pc, #48]	; (8001468 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001436:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001438:	e002      	b.n	8001440 <LoopCopyDataInit>

0800143a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800143a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800143c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800143e:	3304      	adds	r3, #4

08001440 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001440:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001442:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001444:	d3f9      	bcc.n	800143a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001446:	4a09      	ldr	r2, [pc, #36]	; (800146c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001448:	4c09      	ldr	r4, [pc, #36]	; (8001470 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800144a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800144c:	e001      	b.n	8001452 <LoopFillZerobss>

0800144e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800144e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001450:	3204      	adds	r2, #4

08001452 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001452:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001454:	d3fb      	bcc.n	800144e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001456:	f001 fb11 	bl	8002a7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800145a:	f7ff fcf1 	bl	8000e40 <main>
  bx lr
 800145e:	4770      	bx	lr
  ldr r0, =_sdata
 8001460:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001464:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001468:	08002b08 	.word	0x08002b08
  ldr r2, =_sbss
 800146c:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001470:	20000174 	.word	0x20000174

08001474 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001474:	e7fe      	b.n	8001474 <ADC1_2_IRQHandler>
	...

08001478 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800147c:	4b08      	ldr	r3, [pc, #32]	; (80014a0 <HAL_Init+0x28>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a07      	ldr	r2, [pc, #28]	; (80014a0 <HAL_Init+0x28>)
 8001482:	f043 0310 	orr.w	r3, r3, #16
 8001486:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001488:	2003      	movs	r0, #3
 800148a:	f000 f923 	bl	80016d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800148e:	200f      	movs	r0, #15
 8001490:	f000 f808 	bl	80014a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001494:	f7ff ff38 	bl	8001308 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001498:	2300      	movs	r3, #0
}
 800149a:	4618      	mov	r0, r3
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40022000 	.word	0x40022000

080014a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014ac:	4b12      	ldr	r3, [pc, #72]	; (80014f8 <HAL_InitTick+0x54>)
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	4b12      	ldr	r3, [pc, #72]	; (80014fc <HAL_InitTick+0x58>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	4619      	mov	r1, r3
 80014b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80014be:	fbb2 f3f3 	udiv	r3, r2, r3
 80014c2:	4618      	mov	r0, r3
 80014c4:	f000 f93b 	bl	800173e <HAL_SYSTICK_Config>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e00e      	b.n	80014f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2b0f      	cmp	r3, #15
 80014d6:	d80a      	bhi.n	80014ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014d8:	2200      	movs	r2, #0
 80014da:	6879      	ldr	r1, [r7, #4]
 80014dc:	f04f 30ff 	mov.w	r0, #4294967295
 80014e0:	f000 f903 	bl	80016ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014e4:	4a06      	ldr	r2, [pc, #24]	; (8001500 <HAL_InitTick+0x5c>)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014ea:	2300      	movs	r3, #0
 80014ec:	e000      	b.n	80014f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3708      	adds	r7, #8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	20000058 	.word	0x20000058
 80014fc:	20000060 	.word	0x20000060
 8001500:	2000005c 	.word	0x2000005c

08001504 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001508:	4b05      	ldr	r3, [pc, #20]	; (8001520 <HAL_IncTick+0x1c>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	461a      	mov	r2, r3
 800150e:	4b05      	ldr	r3, [pc, #20]	; (8001524 <HAL_IncTick+0x20>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4413      	add	r3, r2
 8001514:	4a03      	ldr	r2, [pc, #12]	; (8001524 <HAL_IncTick+0x20>)
 8001516:	6013      	str	r3, [r2, #0]
}
 8001518:	bf00      	nop
 800151a:	46bd      	mov	sp, r7
 800151c:	bc80      	pop	{r7}
 800151e:	4770      	bx	lr
 8001520:	20000060 	.word	0x20000060
 8001524:	20000170 	.word	0x20000170

08001528 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  return uwTick;
 800152c:	4b02      	ldr	r3, [pc, #8]	; (8001538 <HAL_GetTick+0x10>)
 800152e:	681b      	ldr	r3, [r3, #0]
}
 8001530:	4618      	mov	r0, r3
 8001532:	46bd      	mov	sp, r7
 8001534:	bc80      	pop	{r7}
 8001536:	4770      	bx	lr
 8001538:	20000170 	.word	0x20000170

0800153c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800153c:	b480      	push	{r7}
 800153e:	b085      	sub	sp, #20
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f003 0307 	and.w	r3, r3, #7
 800154a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800154c:	4b0c      	ldr	r3, [pc, #48]	; (8001580 <__NVIC_SetPriorityGrouping+0x44>)
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001552:	68ba      	ldr	r2, [r7, #8]
 8001554:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001558:	4013      	ands	r3, r2
 800155a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001564:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001568:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800156c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800156e:	4a04      	ldr	r2, [pc, #16]	; (8001580 <__NVIC_SetPriorityGrouping+0x44>)
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	60d3      	str	r3, [r2, #12]
}
 8001574:	bf00      	nop
 8001576:	3714      	adds	r7, #20
 8001578:	46bd      	mov	sp, r7
 800157a:	bc80      	pop	{r7}
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	e000ed00 	.word	0xe000ed00

08001584 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001588:	4b04      	ldr	r3, [pc, #16]	; (800159c <__NVIC_GetPriorityGrouping+0x18>)
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	0a1b      	lsrs	r3, r3, #8
 800158e:	f003 0307 	and.w	r3, r3, #7
}
 8001592:	4618      	mov	r0, r3
 8001594:	46bd      	mov	sp, r7
 8001596:	bc80      	pop	{r7}
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	e000ed00 	.word	0xe000ed00

080015a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	db0b      	blt.n	80015ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015b2:	79fb      	ldrb	r3, [r7, #7]
 80015b4:	f003 021f 	and.w	r2, r3, #31
 80015b8:	4906      	ldr	r1, [pc, #24]	; (80015d4 <__NVIC_EnableIRQ+0x34>)
 80015ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015be:	095b      	lsrs	r3, r3, #5
 80015c0:	2001      	movs	r0, #1
 80015c2:	fa00 f202 	lsl.w	r2, r0, r2
 80015c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015ca:	bf00      	nop
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bc80      	pop	{r7}
 80015d2:	4770      	bx	lr
 80015d4:	e000e100 	.word	0xe000e100

080015d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	4603      	mov	r3, r0
 80015e0:	6039      	str	r1, [r7, #0]
 80015e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	db0a      	blt.n	8001602 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	b2da      	uxtb	r2, r3
 80015f0:	490c      	ldr	r1, [pc, #48]	; (8001624 <__NVIC_SetPriority+0x4c>)
 80015f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f6:	0112      	lsls	r2, r2, #4
 80015f8:	b2d2      	uxtb	r2, r2
 80015fa:	440b      	add	r3, r1
 80015fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001600:	e00a      	b.n	8001618 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	b2da      	uxtb	r2, r3
 8001606:	4908      	ldr	r1, [pc, #32]	; (8001628 <__NVIC_SetPriority+0x50>)
 8001608:	79fb      	ldrb	r3, [r7, #7]
 800160a:	f003 030f 	and.w	r3, r3, #15
 800160e:	3b04      	subs	r3, #4
 8001610:	0112      	lsls	r2, r2, #4
 8001612:	b2d2      	uxtb	r2, r2
 8001614:	440b      	add	r3, r1
 8001616:	761a      	strb	r2, [r3, #24]
}
 8001618:	bf00      	nop
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	bc80      	pop	{r7}
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	e000e100 	.word	0xe000e100
 8001628:	e000ed00 	.word	0xe000ed00

0800162c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800162c:	b480      	push	{r7}
 800162e:	b089      	sub	sp, #36	; 0x24
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	f003 0307 	and.w	r3, r3, #7
 800163e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	f1c3 0307 	rsb	r3, r3, #7
 8001646:	2b04      	cmp	r3, #4
 8001648:	bf28      	it	cs
 800164a:	2304      	movcs	r3, #4
 800164c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	3304      	adds	r3, #4
 8001652:	2b06      	cmp	r3, #6
 8001654:	d902      	bls.n	800165c <NVIC_EncodePriority+0x30>
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	3b03      	subs	r3, #3
 800165a:	e000      	b.n	800165e <NVIC_EncodePriority+0x32>
 800165c:	2300      	movs	r3, #0
 800165e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001660:	f04f 32ff 	mov.w	r2, #4294967295
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	fa02 f303 	lsl.w	r3, r2, r3
 800166a:	43da      	mvns	r2, r3
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	401a      	ands	r2, r3
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001674:	f04f 31ff 	mov.w	r1, #4294967295
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	fa01 f303 	lsl.w	r3, r1, r3
 800167e:	43d9      	mvns	r1, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001684:	4313      	orrs	r3, r2
         );
}
 8001686:	4618      	mov	r0, r3
 8001688:	3724      	adds	r7, #36	; 0x24
 800168a:	46bd      	mov	sp, r7
 800168c:	bc80      	pop	{r7}
 800168e:	4770      	bx	lr

08001690 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	3b01      	subs	r3, #1
 800169c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016a0:	d301      	bcc.n	80016a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016a2:	2301      	movs	r3, #1
 80016a4:	e00f      	b.n	80016c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016a6:	4a0a      	ldr	r2, [pc, #40]	; (80016d0 <SysTick_Config+0x40>)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	3b01      	subs	r3, #1
 80016ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016ae:	210f      	movs	r1, #15
 80016b0:	f04f 30ff 	mov.w	r0, #4294967295
 80016b4:	f7ff ff90 	bl	80015d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016b8:	4b05      	ldr	r3, [pc, #20]	; (80016d0 <SysTick_Config+0x40>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016be:	4b04      	ldr	r3, [pc, #16]	; (80016d0 <SysTick_Config+0x40>)
 80016c0:	2207      	movs	r2, #7
 80016c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016c4:	2300      	movs	r3, #0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	e000e010 	.word	0xe000e010

080016d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f7ff ff2d 	bl	800153c <__NVIC_SetPriorityGrouping>
}
 80016e2:	bf00      	nop
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b086      	sub	sp, #24
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	4603      	mov	r3, r0
 80016f2:	60b9      	str	r1, [r7, #8]
 80016f4:	607a      	str	r2, [r7, #4]
 80016f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016f8:	2300      	movs	r3, #0
 80016fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016fc:	f7ff ff42 	bl	8001584 <__NVIC_GetPriorityGrouping>
 8001700:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	68b9      	ldr	r1, [r7, #8]
 8001706:	6978      	ldr	r0, [r7, #20]
 8001708:	f7ff ff90 	bl	800162c <NVIC_EncodePriority>
 800170c:	4602      	mov	r2, r0
 800170e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001712:	4611      	mov	r1, r2
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff ff5f 	bl	80015d8 <__NVIC_SetPriority>
}
 800171a:	bf00      	nop
 800171c:	3718      	adds	r7, #24
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	b082      	sub	sp, #8
 8001726:	af00      	add	r7, sp, #0
 8001728:	4603      	mov	r3, r0
 800172a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800172c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff ff35 	bl	80015a0 <__NVIC_EnableIRQ>
}
 8001736:	bf00      	nop
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	b082      	sub	sp, #8
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f7ff ffa2 	bl	8001690 <SysTick_Config>
 800174c:	4603      	mov	r3, r0
}
 800174e:	4618      	mov	r0, r3
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
	...

08001758 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001758:	b480      	push	{r7}
 800175a:	b08b      	sub	sp, #44	; 0x2c
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001762:	2300      	movs	r3, #0
 8001764:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001766:	2300      	movs	r3, #0
 8001768:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800176a:	e161      	b.n	8001a30 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800176c:	2201      	movs	r2, #1
 800176e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001770:	fa02 f303 	lsl.w	r3, r2, r3
 8001774:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	69fa      	ldr	r2, [r7, #28]
 800177c:	4013      	ands	r3, r2
 800177e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	429a      	cmp	r2, r3
 8001786:	f040 8150 	bne.w	8001a2a <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	4a97      	ldr	r2, [pc, #604]	; (80019ec <HAL_GPIO_Init+0x294>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d05e      	beq.n	8001852 <HAL_GPIO_Init+0xfa>
 8001794:	4a95      	ldr	r2, [pc, #596]	; (80019ec <HAL_GPIO_Init+0x294>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d875      	bhi.n	8001886 <HAL_GPIO_Init+0x12e>
 800179a:	4a95      	ldr	r2, [pc, #596]	; (80019f0 <HAL_GPIO_Init+0x298>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d058      	beq.n	8001852 <HAL_GPIO_Init+0xfa>
 80017a0:	4a93      	ldr	r2, [pc, #588]	; (80019f0 <HAL_GPIO_Init+0x298>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d86f      	bhi.n	8001886 <HAL_GPIO_Init+0x12e>
 80017a6:	4a93      	ldr	r2, [pc, #588]	; (80019f4 <HAL_GPIO_Init+0x29c>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d052      	beq.n	8001852 <HAL_GPIO_Init+0xfa>
 80017ac:	4a91      	ldr	r2, [pc, #580]	; (80019f4 <HAL_GPIO_Init+0x29c>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d869      	bhi.n	8001886 <HAL_GPIO_Init+0x12e>
 80017b2:	4a91      	ldr	r2, [pc, #580]	; (80019f8 <HAL_GPIO_Init+0x2a0>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d04c      	beq.n	8001852 <HAL_GPIO_Init+0xfa>
 80017b8:	4a8f      	ldr	r2, [pc, #572]	; (80019f8 <HAL_GPIO_Init+0x2a0>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d863      	bhi.n	8001886 <HAL_GPIO_Init+0x12e>
 80017be:	4a8f      	ldr	r2, [pc, #572]	; (80019fc <HAL_GPIO_Init+0x2a4>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d046      	beq.n	8001852 <HAL_GPIO_Init+0xfa>
 80017c4:	4a8d      	ldr	r2, [pc, #564]	; (80019fc <HAL_GPIO_Init+0x2a4>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d85d      	bhi.n	8001886 <HAL_GPIO_Init+0x12e>
 80017ca:	2b12      	cmp	r3, #18
 80017cc:	d82a      	bhi.n	8001824 <HAL_GPIO_Init+0xcc>
 80017ce:	2b12      	cmp	r3, #18
 80017d0:	d859      	bhi.n	8001886 <HAL_GPIO_Init+0x12e>
 80017d2:	a201      	add	r2, pc, #4	; (adr r2, 80017d8 <HAL_GPIO_Init+0x80>)
 80017d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017d8:	08001853 	.word	0x08001853
 80017dc:	0800182d 	.word	0x0800182d
 80017e0:	0800183f 	.word	0x0800183f
 80017e4:	08001881 	.word	0x08001881
 80017e8:	08001887 	.word	0x08001887
 80017ec:	08001887 	.word	0x08001887
 80017f0:	08001887 	.word	0x08001887
 80017f4:	08001887 	.word	0x08001887
 80017f8:	08001887 	.word	0x08001887
 80017fc:	08001887 	.word	0x08001887
 8001800:	08001887 	.word	0x08001887
 8001804:	08001887 	.word	0x08001887
 8001808:	08001887 	.word	0x08001887
 800180c:	08001887 	.word	0x08001887
 8001810:	08001887 	.word	0x08001887
 8001814:	08001887 	.word	0x08001887
 8001818:	08001887 	.word	0x08001887
 800181c:	08001835 	.word	0x08001835
 8001820:	08001849 	.word	0x08001849
 8001824:	4a76      	ldr	r2, [pc, #472]	; (8001a00 <HAL_GPIO_Init+0x2a8>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d013      	beq.n	8001852 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800182a:	e02c      	b.n	8001886 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	623b      	str	r3, [r7, #32]
          break;
 8001832:	e029      	b.n	8001888 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	3304      	adds	r3, #4
 800183a:	623b      	str	r3, [r7, #32]
          break;
 800183c:	e024      	b.n	8001888 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	68db      	ldr	r3, [r3, #12]
 8001842:	3308      	adds	r3, #8
 8001844:	623b      	str	r3, [r7, #32]
          break;
 8001846:	e01f      	b.n	8001888 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	330c      	adds	r3, #12
 800184e:	623b      	str	r3, [r7, #32]
          break;
 8001850:	e01a      	b.n	8001888 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d102      	bne.n	8001860 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800185a:	2304      	movs	r3, #4
 800185c:	623b      	str	r3, [r7, #32]
          break;
 800185e:	e013      	b.n	8001888 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	2b01      	cmp	r3, #1
 8001866:	d105      	bne.n	8001874 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001868:	2308      	movs	r3, #8
 800186a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	69fa      	ldr	r2, [r7, #28]
 8001870:	611a      	str	r2, [r3, #16]
          break;
 8001872:	e009      	b.n	8001888 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001874:	2308      	movs	r3, #8
 8001876:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	69fa      	ldr	r2, [r7, #28]
 800187c:	615a      	str	r2, [r3, #20]
          break;
 800187e:	e003      	b.n	8001888 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001880:	2300      	movs	r3, #0
 8001882:	623b      	str	r3, [r7, #32]
          break;
 8001884:	e000      	b.n	8001888 <HAL_GPIO_Init+0x130>
          break;
 8001886:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001888:	69bb      	ldr	r3, [r7, #24]
 800188a:	2bff      	cmp	r3, #255	; 0xff
 800188c:	d801      	bhi.n	8001892 <HAL_GPIO_Init+0x13a>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	e001      	b.n	8001896 <HAL_GPIO_Init+0x13e>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	3304      	adds	r3, #4
 8001896:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001898:	69bb      	ldr	r3, [r7, #24]
 800189a:	2bff      	cmp	r3, #255	; 0xff
 800189c:	d802      	bhi.n	80018a4 <HAL_GPIO_Init+0x14c>
 800189e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	e002      	b.n	80018aa <HAL_GPIO_Init+0x152>
 80018a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a6:	3b08      	subs	r3, #8
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	210f      	movs	r1, #15
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	fa01 f303 	lsl.w	r3, r1, r3
 80018b8:	43db      	mvns	r3, r3
 80018ba:	401a      	ands	r2, r3
 80018bc:	6a39      	ldr	r1, [r7, #32]
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	fa01 f303 	lsl.w	r3, r1, r3
 80018c4:	431a      	orrs	r2, r3
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	f000 80a9 	beq.w	8001a2a <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018d8:	4b4a      	ldr	r3, [pc, #296]	; (8001a04 <HAL_GPIO_Init+0x2ac>)
 80018da:	699b      	ldr	r3, [r3, #24]
 80018dc:	4a49      	ldr	r2, [pc, #292]	; (8001a04 <HAL_GPIO_Init+0x2ac>)
 80018de:	f043 0301 	orr.w	r3, r3, #1
 80018e2:	6193      	str	r3, [r2, #24]
 80018e4:	4b47      	ldr	r3, [pc, #284]	; (8001a04 <HAL_GPIO_Init+0x2ac>)
 80018e6:	699b      	ldr	r3, [r3, #24]
 80018e8:	f003 0301 	and.w	r3, r3, #1
 80018ec:	60bb      	str	r3, [r7, #8]
 80018ee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80018f0:	4a45      	ldr	r2, [pc, #276]	; (8001a08 <HAL_GPIO_Init+0x2b0>)
 80018f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f4:	089b      	lsrs	r3, r3, #2
 80018f6:	3302      	adds	r3, #2
 80018f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018fc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80018fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001900:	f003 0303 	and.w	r3, r3, #3
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	220f      	movs	r2, #15
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	43db      	mvns	r3, r3
 800190e:	68fa      	ldr	r2, [r7, #12]
 8001910:	4013      	ands	r3, r2
 8001912:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	4a3d      	ldr	r2, [pc, #244]	; (8001a0c <HAL_GPIO_Init+0x2b4>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d00d      	beq.n	8001938 <HAL_GPIO_Init+0x1e0>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	4a3c      	ldr	r2, [pc, #240]	; (8001a10 <HAL_GPIO_Init+0x2b8>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d007      	beq.n	8001934 <HAL_GPIO_Init+0x1dc>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	4a3b      	ldr	r2, [pc, #236]	; (8001a14 <HAL_GPIO_Init+0x2bc>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d101      	bne.n	8001930 <HAL_GPIO_Init+0x1d8>
 800192c:	2302      	movs	r3, #2
 800192e:	e004      	b.n	800193a <HAL_GPIO_Init+0x1e2>
 8001930:	2303      	movs	r3, #3
 8001932:	e002      	b.n	800193a <HAL_GPIO_Init+0x1e2>
 8001934:	2301      	movs	r3, #1
 8001936:	e000      	b.n	800193a <HAL_GPIO_Init+0x1e2>
 8001938:	2300      	movs	r3, #0
 800193a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800193c:	f002 0203 	and.w	r2, r2, #3
 8001940:	0092      	lsls	r2, r2, #2
 8001942:	4093      	lsls	r3, r2
 8001944:	68fa      	ldr	r2, [r7, #12]
 8001946:	4313      	orrs	r3, r2
 8001948:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800194a:	492f      	ldr	r1, [pc, #188]	; (8001a08 <HAL_GPIO_Init+0x2b0>)
 800194c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194e:	089b      	lsrs	r3, r3, #2
 8001950:	3302      	adds	r3, #2
 8001952:	68fa      	ldr	r2, [r7, #12]
 8001954:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001960:	2b00      	cmp	r3, #0
 8001962:	d006      	beq.n	8001972 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001964:	4b2c      	ldr	r3, [pc, #176]	; (8001a18 <HAL_GPIO_Init+0x2c0>)
 8001966:	689a      	ldr	r2, [r3, #8]
 8001968:	492b      	ldr	r1, [pc, #172]	; (8001a18 <HAL_GPIO_Init+0x2c0>)
 800196a:	69bb      	ldr	r3, [r7, #24]
 800196c:	4313      	orrs	r3, r2
 800196e:	608b      	str	r3, [r1, #8]
 8001970:	e006      	b.n	8001980 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001972:	4b29      	ldr	r3, [pc, #164]	; (8001a18 <HAL_GPIO_Init+0x2c0>)
 8001974:	689a      	ldr	r2, [r3, #8]
 8001976:	69bb      	ldr	r3, [r7, #24]
 8001978:	43db      	mvns	r3, r3
 800197a:	4927      	ldr	r1, [pc, #156]	; (8001a18 <HAL_GPIO_Init+0x2c0>)
 800197c:	4013      	ands	r3, r2
 800197e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d006      	beq.n	800199a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800198c:	4b22      	ldr	r3, [pc, #136]	; (8001a18 <HAL_GPIO_Init+0x2c0>)
 800198e:	68da      	ldr	r2, [r3, #12]
 8001990:	4921      	ldr	r1, [pc, #132]	; (8001a18 <HAL_GPIO_Init+0x2c0>)
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	4313      	orrs	r3, r2
 8001996:	60cb      	str	r3, [r1, #12]
 8001998:	e006      	b.n	80019a8 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800199a:	4b1f      	ldr	r3, [pc, #124]	; (8001a18 <HAL_GPIO_Init+0x2c0>)
 800199c:	68da      	ldr	r2, [r3, #12]
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	43db      	mvns	r3, r3
 80019a2:	491d      	ldr	r1, [pc, #116]	; (8001a18 <HAL_GPIO_Init+0x2c0>)
 80019a4:	4013      	ands	r3, r2
 80019a6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d006      	beq.n	80019c2 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019b4:	4b18      	ldr	r3, [pc, #96]	; (8001a18 <HAL_GPIO_Init+0x2c0>)
 80019b6:	685a      	ldr	r2, [r3, #4]
 80019b8:	4917      	ldr	r1, [pc, #92]	; (8001a18 <HAL_GPIO_Init+0x2c0>)
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	4313      	orrs	r3, r2
 80019be:	604b      	str	r3, [r1, #4]
 80019c0:	e006      	b.n	80019d0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019c2:	4b15      	ldr	r3, [pc, #84]	; (8001a18 <HAL_GPIO_Init+0x2c0>)
 80019c4:	685a      	ldr	r2, [r3, #4]
 80019c6:	69bb      	ldr	r3, [r7, #24]
 80019c8:	43db      	mvns	r3, r3
 80019ca:	4913      	ldr	r1, [pc, #76]	; (8001a18 <HAL_GPIO_Init+0x2c0>)
 80019cc:	4013      	ands	r3, r2
 80019ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d01f      	beq.n	8001a1c <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019dc:	4b0e      	ldr	r3, [pc, #56]	; (8001a18 <HAL_GPIO_Init+0x2c0>)
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	490d      	ldr	r1, [pc, #52]	; (8001a18 <HAL_GPIO_Init+0x2c0>)
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	600b      	str	r3, [r1, #0]
 80019e8:	e01f      	b.n	8001a2a <HAL_GPIO_Init+0x2d2>
 80019ea:	bf00      	nop
 80019ec:	10320000 	.word	0x10320000
 80019f0:	10310000 	.word	0x10310000
 80019f4:	10220000 	.word	0x10220000
 80019f8:	10210000 	.word	0x10210000
 80019fc:	10120000 	.word	0x10120000
 8001a00:	10110000 	.word	0x10110000
 8001a04:	40021000 	.word	0x40021000
 8001a08:	40010000 	.word	0x40010000
 8001a0c:	40010800 	.word	0x40010800
 8001a10:	40010c00 	.word	0x40010c00
 8001a14:	40011000 	.word	0x40011000
 8001a18:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a1c:	4b0b      	ldr	r3, [pc, #44]	; (8001a4c <HAL_GPIO_Init+0x2f4>)
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	43db      	mvns	r3, r3
 8001a24:	4909      	ldr	r1, [pc, #36]	; (8001a4c <HAL_GPIO_Init+0x2f4>)
 8001a26:	4013      	ands	r3, r2
 8001a28:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a36:	fa22 f303 	lsr.w	r3, r2, r3
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	f47f ae96 	bne.w	800176c <HAL_GPIO_Init+0x14>
  }
}
 8001a40:	bf00      	nop
 8001a42:	bf00      	nop
 8001a44:	372c      	adds	r7, #44	; 0x2c
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bc80      	pop	{r7}
 8001a4a:	4770      	bx	lr
 8001a4c:	40010400 	.word	0x40010400

08001a50 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	460b      	mov	r3, r1
 8001a5a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	689a      	ldr	r2, [r3, #8]
 8001a60:	887b      	ldrh	r3, [r7, #2]
 8001a62:	4013      	ands	r3, r2
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d002      	beq.n	8001a6e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	73fb      	strb	r3, [r7, #15]
 8001a6c:	e001      	b.n	8001a72 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3714      	adds	r7, #20
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bc80      	pop	{r7}
 8001a7c:	4770      	bx	lr

08001a7e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	b083      	sub	sp, #12
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
 8001a86:	460b      	mov	r3, r1
 8001a88:	807b      	strh	r3, [r7, #2]
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a8e:	787b      	ldrb	r3, [r7, #1]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d003      	beq.n	8001a9c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a94:	887a      	ldrh	r2, [r7, #2]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a9a:	e003      	b.n	8001aa4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a9c:	887b      	ldrh	r3, [r7, #2]
 8001a9e:	041a      	lsls	r2, r3, #16
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	611a      	str	r2, [r3, #16]
}
 8001aa4:	bf00      	nop
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bc80      	pop	{r7}
 8001aac:	4770      	bx	lr

08001aae <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	b085      	sub	sp, #20
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	68db      	ldr	r3, [r3, #12]
 8001abe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ac0:	887a      	ldrh	r2, [r7, #2]
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	041a      	lsls	r2, r3, #16
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	43d9      	mvns	r1, r3
 8001acc:	887b      	ldrh	r3, [r7, #2]
 8001ace:	400b      	ands	r3, r1
 8001ad0:	431a      	orrs	r2, r3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	611a      	str	r2, [r3, #16]
}
 8001ad6:	bf00      	nop
 8001ad8:	3714      	adds	r7, #20
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bc80      	pop	{r7}
 8001ade:	4770      	bx	lr

08001ae0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b086      	sub	sp, #24
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d101      	bne.n	8001af2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e272      	b.n	8001fd8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0301 	and.w	r3, r3, #1
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	f000 8087 	beq.w	8001c0e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b00:	4b92      	ldr	r3, [pc, #584]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f003 030c 	and.w	r3, r3, #12
 8001b08:	2b04      	cmp	r3, #4
 8001b0a:	d00c      	beq.n	8001b26 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b0c:	4b8f      	ldr	r3, [pc, #572]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f003 030c 	and.w	r3, r3, #12
 8001b14:	2b08      	cmp	r3, #8
 8001b16:	d112      	bne.n	8001b3e <HAL_RCC_OscConfig+0x5e>
 8001b18:	4b8c      	ldr	r3, [pc, #560]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b24:	d10b      	bne.n	8001b3e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b26:	4b89      	ldr	r3, [pc, #548]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d06c      	beq.n	8001c0c <HAL_RCC_OscConfig+0x12c>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d168      	bne.n	8001c0c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e24c      	b.n	8001fd8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b46:	d106      	bne.n	8001b56 <HAL_RCC_OscConfig+0x76>
 8001b48:	4b80      	ldr	r3, [pc, #512]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a7f      	ldr	r2, [pc, #508]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001b4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b52:	6013      	str	r3, [r2, #0]
 8001b54:	e02e      	b.n	8001bb4 <HAL_RCC_OscConfig+0xd4>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d10c      	bne.n	8001b78 <HAL_RCC_OscConfig+0x98>
 8001b5e:	4b7b      	ldr	r3, [pc, #492]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a7a      	ldr	r2, [pc, #488]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001b64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b68:	6013      	str	r3, [r2, #0]
 8001b6a:	4b78      	ldr	r3, [pc, #480]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a77      	ldr	r2, [pc, #476]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001b70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b74:	6013      	str	r3, [r2, #0]
 8001b76:	e01d      	b.n	8001bb4 <HAL_RCC_OscConfig+0xd4>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b80:	d10c      	bne.n	8001b9c <HAL_RCC_OscConfig+0xbc>
 8001b82:	4b72      	ldr	r3, [pc, #456]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a71      	ldr	r2, [pc, #452]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001b88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b8c:	6013      	str	r3, [r2, #0]
 8001b8e:	4b6f      	ldr	r3, [pc, #444]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a6e      	ldr	r2, [pc, #440]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001b94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b98:	6013      	str	r3, [r2, #0]
 8001b9a:	e00b      	b.n	8001bb4 <HAL_RCC_OscConfig+0xd4>
 8001b9c:	4b6b      	ldr	r3, [pc, #428]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a6a      	ldr	r2, [pc, #424]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001ba2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ba6:	6013      	str	r3, [r2, #0]
 8001ba8:	4b68      	ldr	r3, [pc, #416]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a67      	ldr	r2, [pc, #412]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001bae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bb2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d013      	beq.n	8001be4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bbc:	f7ff fcb4 	bl	8001528 <HAL_GetTick>
 8001bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bc2:	e008      	b.n	8001bd6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bc4:	f7ff fcb0 	bl	8001528 <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	2b64      	cmp	r3, #100	; 0x64
 8001bd0:	d901      	bls.n	8001bd6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e200      	b.n	8001fd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bd6:	4b5d      	ldr	r3, [pc, #372]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d0f0      	beq.n	8001bc4 <HAL_RCC_OscConfig+0xe4>
 8001be2:	e014      	b.n	8001c0e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be4:	f7ff fca0 	bl	8001528 <HAL_GetTick>
 8001be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bea:	e008      	b.n	8001bfe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bec:	f7ff fc9c 	bl	8001528 <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	2b64      	cmp	r3, #100	; 0x64
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e1ec      	b.n	8001fd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bfe:	4b53      	ldr	r3, [pc, #332]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d1f0      	bne.n	8001bec <HAL_RCC_OscConfig+0x10c>
 8001c0a:	e000      	b.n	8001c0e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d063      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c1a:	4b4c      	ldr	r3, [pc, #304]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f003 030c 	and.w	r3, r3, #12
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d00b      	beq.n	8001c3e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c26:	4b49      	ldr	r3, [pc, #292]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f003 030c 	and.w	r3, r3, #12
 8001c2e:	2b08      	cmp	r3, #8
 8001c30:	d11c      	bne.n	8001c6c <HAL_RCC_OscConfig+0x18c>
 8001c32:	4b46      	ldr	r3, [pc, #280]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d116      	bne.n	8001c6c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c3e:	4b43      	ldr	r3, [pc, #268]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0302 	and.w	r3, r3, #2
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d005      	beq.n	8001c56 <HAL_RCC_OscConfig+0x176>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	691b      	ldr	r3, [r3, #16]
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d001      	beq.n	8001c56 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e1c0      	b.n	8001fd8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c56:	4b3d      	ldr	r3, [pc, #244]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	695b      	ldr	r3, [r3, #20]
 8001c62:	00db      	lsls	r3, r3, #3
 8001c64:	4939      	ldr	r1, [pc, #228]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001c66:	4313      	orrs	r3, r2
 8001c68:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c6a:	e03a      	b.n	8001ce2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	691b      	ldr	r3, [r3, #16]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d020      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c74:	4b36      	ldr	r3, [pc, #216]	; (8001d50 <HAL_RCC_OscConfig+0x270>)
 8001c76:	2201      	movs	r2, #1
 8001c78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c7a:	f7ff fc55 	bl	8001528 <HAL_GetTick>
 8001c7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c80:	e008      	b.n	8001c94 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c82:	f7ff fc51 	bl	8001528 <HAL_GetTick>
 8001c86:	4602      	mov	r2, r0
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d901      	bls.n	8001c94 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c90:	2303      	movs	r3, #3
 8001c92:	e1a1      	b.n	8001fd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c94:	4b2d      	ldr	r3, [pc, #180]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0302 	and.w	r3, r3, #2
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d0f0      	beq.n	8001c82 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ca0:	4b2a      	ldr	r3, [pc, #168]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	695b      	ldr	r3, [r3, #20]
 8001cac:	00db      	lsls	r3, r3, #3
 8001cae:	4927      	ldr	r1, [pc, #156]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	600b      	str	r3, [r1, #0]
 8001cb4:	e015      	b.n	8001ce2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cb6:	4b26      	ldr	r3, [pc, #152]	; (8001d50 <HAL_RCC_OscConfig+0x270>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cbc:	f7ff fc34 	bl	8001528 <HAL_GetTick>
 8001cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cc2:	e008      	b.n	8001cd6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cc4:	f7ff fc30 	bl	8001528 <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d901      	bls.n	8001cd6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e180      	b.n	8001fd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cd6:	4b1d      	ldr	r3, [pc, #116]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d1f0      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0308 	and.w	r3, r3, #8
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d03a      	beq.n	8001d64 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	699b      	ldr	r3, [r3, #24]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d019      	beq.n	8001d2a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cf6:	4b17      	ldr	r3, [pc, #92]	; (8001d54 <HAL_RCC_OscConfig+0x274>)
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cfc:	f7ff fc14 	bl	8001528 <HAL_GetTick>
 8001d00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d02:	e008      	b.n	8001d16 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d04:	f7ff fc10 	bl	8001528 <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d901      	bls.n	8001d16 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e160      	b.n	8001fd8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d16:	4b0d      	ldr	r3, [pc, #52]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d0f0      	beq.n	8001d04 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d22:	2001      	movs	r0, #1
 8001d24:	f000 fa9c 	bl	8002260 <RCC_Delay>
 8001d28:	e01c      	b.n	8001d64 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d2a:	4b0a      	ldr	r3, [pc, #40]	; (8001d54 <HAL_RCC_OscConfig+0x274>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d30:	f7ff fbfa 	bl	8001528 <HAL_GetTick>
 8001d34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d36:	e00f      	b.n	8001d58 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d38:	f7ff fbf6 	bl	8001528 <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d908      	bls.n	8001d58 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e146      	b.n	8001fd8 <HAL_RCC_OscConfig+0x4f8>
 8001d4a:	bf00      	nop
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	42420000 	.word	0x42420000
 8001d54:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d58:	4b92      	ldr	r3, [pc, #584]	; (8001fa4 <HAL_RCC_OscConfig+0x4c4>)
 8001d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5c:	f003 0302 	and.w	r3, r3, #2
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d1e9      	bne.n	8001d38 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0304 	and.w	r3, r3, #4
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	f000 80a6 	beq.w	8001ebe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d72:	2300      	movs	r3, #0
 8001d74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d76:	4b8b      	ldr	r3, [pc, #556]	; (8001fa4 <HAL_RCC_OscConfig+0x4c4>)
 8001d78:	69db      	ldr	r3, [r3, #28]
 8001d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d10d      	bne.n	8001d9e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d82:	4b88      	ldr	r3, [pc, #544]	; (8001fa4 <HAL_RCC_OscConfig+0x4c4>)
 8001d84:	69db      	ldr	r3, [r3, #28]
 8001d86:	4a87      	ldr	r2, [pc, #540]	; (8001fa4 <HAL_RCC_OscConfig+0x4c4>)
 8001d88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d8c:	61d3      	str	r3, [r2, #28]
 8001d8e:	4b85      	ldr	r3, [pc, #532]	; (8001fa4 <HAL_RCC_OscConfig+0x4c4>)
 8001d90:	69db      	ldr	r3, [r3, #28]
 8001d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d96:	60bb      	str	r3, [r7, #8]
 8001d98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d9e:	4b82      	ldr	r3, [pc, #520]	; (8001fa8 <HAL_RCC_OscConfig+0x4c8>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d118      	bne.n	8001ddc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001daa:	4b7f      	ldr	r3, [pc, #508]	; (8001fa8 <HAL_RCC_OscConfig+0x4c8>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a7e      	ldr	r2, [pc, #504]	; (8001fa8 <HAL_RCC_OscConfig+0x4c8>)
 8001db0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001db4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001db6:	f7ff fbb7 	bl	8001528 <HAL_GetTick>
 8001dba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dbc:	e008      	b.n	8001dd0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dbe:	f7ff fbb3 	bl	8001528 <HAL_GetTick>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	2b64      	cmp	r3, #100	; 0x64
 8001dca:	d901      	bls.n	8001dd0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e103      	b.n	8001fd8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dd0:	4b75      	ldr	r3, [pc, #468]	; (8001fa8 <HAL_RCC_OscConfig+0x4c8>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d0f0      	beq.n	8001dbe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d106      	bne.n	8001df2 <HAL_RCC_OscConfig+0x312>
 8001de4:	4b6f      	ldr	r3, [pc, #444]	; (8001fa4 <HAL_RCC_OscConfig+0x4c4>)
 8001de6:	6a1b      	ldr	r3, [r3, #32]
 8001de8:	4a6e      	ldr	r2, [pc, #440]	; (8001fa4 <HAL_RCC_OscConfig+0x4c4>)
 8001dea:	f043 0301 	orr.w	r3, r3, #1
 8001dee:	6213      	str	r3, [r2, #32]
 8001df0:	e02d      	b.n	8001e4e <HAL_RCC_OscConfig+0x36e>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d10c      	bne.n	8001e14 <HAL_RCC_OscConfig+0x334>
 8001dfa:	4b6a      	ldr	r3, [pc, #424]	; (8001fa4 <HAL_RCC_OscConfig+0x4c4>)
 8001dfc:	6a1b      	ldr	r3, [r3, #32]
 8001dfe:	4a69      	ldr	r2, [pc, #420]	; (8001fa4 <HAL_RCC_OscConfig+0x4c4>)
 8001e00:	f023 0301 	bic.w	r3, r3, #1
 8001e04:	6213      	str	r3, [r2, #32]
 8001e06:	4b67      	ldr	r3, [pc, #412]	; (8001fa4 <HAL_RCC_OscConfig+0x4c4>)
 8001e08:	6a1b      	ldr	r3, [r3, #32]
 8001e0a:	4a66      	ldr	r2, [pc, #408]	; (8001fa4 <HAL_RCC_OscConfig+0x4c4>)
 8001e0c:	f023 0304 	bic.w	r3, r3, #4
 8001e10:	6213      	str	r3, [r2, #32]
 8001e12:	e01c      	b.n	8001e4e <HAL_RCC_OscConfig+0x36e>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	2b05      	cmp	r3, #5
 8001e1a:	d10c      	bne.n	8001e36 <HAL_RCC_OscConfig+0x356>
 8001e1c:	4b61      	ldr	r3, [pc, #388]	; (8001fa4 <HAL_RCC_OscConfig+0x4c4>)
 8001e1e:	6a1b      	ldr	r3, [r3, #32]
 8001e20:	4a60      	ldr	r2, [pc, #384]	; (8001fa4 <HAL_RCC_OscConfig+0x4c4>)
 8001e22:	f043 0304 	orr.w	r3, r3, #4
 8001e26:	6213      	str	r3, [r2, #32]
 8001e28:	4b5e      	ldr	r3, [pc, #376]	; (8001fa4 <HAL_RCC_OscConfig+0x4c4>)
 8001e2a:	6a1b      	ldr	r3, [r3, #32]
 8001e2c:	4a5d      	ldr	r2, [pc, #372]	; (8001fa4 <HAL_RCC_OscConfig+0x4c4>)
 8001e2e:	f043 0301 	orr.w	r3, r3, #1
 8001e32:	6213      	str	r3, [r2, #32]
 8001e34:	e00b      	b.n	8001e4e <HAL_RCC_OscConfig+0x36e>
 8001e36:	4b5b      	ldr	r3, [pc, #364]	; (8001fa4 <HAL_RCC_OscConfig+0x4c4>)
 8001e38:	6a1b      	ldr	r3, [r3, #32]
 8001e3a:	4a5a      	ldr	r2, [pc, #360]	; (8001fa4 <HAL_RCC_OscConfig+0x4c4>)
 8001e3c:	f023 0301 	bic.w	r3, r3, #1
 8001e40:	6213      	str	r3, [r2, #32]
 8001e42:	4b58      	ldr	r3, [pc, #352]	; (8001fa4 <HAL_RCC_OscConfig+0x4c4>)
 8001e44:	6a1b      	ldr	r3, [r3, #32]
 8001e46:	4a57      	ldr	r2, [pc, #348]	; (8001fa4 <HAL_RCC_OscConfig+0x4c4>)
 8001e48:	f023 0304 	bic.w	r3, r3, #4
 8001e4c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d015      	beq.n	8001e82 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e56:	f7ff fb67 	bl	8001528 <HAL_GetTick>
 8001e5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e5c:	e00a      	b.n	8001e74 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e5e:	f7ff fb63 	bl	8001528 <HAL_GetTick>
 8001e62:	4602      	mov	r2, r0
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d901      	bls.n	8001e74 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e70:	2303      	movs	r3, #3
 8001e72:	e0b1      	b.n	8001fd8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e74:	4b4b      	ldr	r3, [pc, #300]	; (8001fa4 <HAL_RCC_OscConfig+0x4c4>)
 8001e76:	6a1b      	ldr	r3, [r3, #32]
 8001e78:	f003 0302 	and.w	r3, r3, #2
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d0ee      	beq.n	8001e5e <HAL_RCC_OscConfig+0x37e>
 8001e80:	e014      	b.n	8001eac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e82:	f7ff fb51 	bl	8001528 <HAL_GetTick>
 8001e86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e88:	e00a      	b.n	8001ea0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e8a:	f7ff fb4d 	bl	8001528 <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d901      	bls.n	8001ea0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e09b      	b.n	8001fd8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ea0:	4b40      	ldr	r3, [pc, #256]	; (8001fa4 <HAL_RCC_OscConfig+0x4c4>)
 8001ea2:	6a1b      	ldr	r3, [r3, #32]
 8001ea4:	f003 0302 	and.w	r3, r3, #2
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d1ee      	bne.n	8001e8a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001eac:	7dfb      	ldrb	r3, [r7, #23]
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d105      	bne.n	8001ebe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eb2:	4b3c      	ldr	r3, [pc, #240]	; (8001fa4 <HAL_RCC_OscConfig+0x4c4>)
 8001eb4:	69db      	ldr	r3, [r3, #28]
 8001eb6:	4a3b      	ldr	r2, [pc, #236]	; (8001fa4 <HAL_RCC_OscConfig+0x4c4>)
 8001eb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ebc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	69db      	ldr	r3, [r3, #28]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	f000 8087 	beq.w	8001fd6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ec8:	4b36      	ldr	r3, [pc, #216]	; (8001fa4 <HAL_RCC_OscConfig+0x4c4>)
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f003 030c 	and.w	r3, r3, #12
 8001ed0:	2b08      	cmp	r3, #8
 8001ed2:	d061      	beq.n	8001f98 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	69db      	ldr	r3, [r3, #28]
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d146      	bne.n	8001f6a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001edc:	4b33      	ldr	r3, [pc, #204]	; (8001fac <HAL_RCC_OscConfig+0x4cc>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee2:	f7ff fb21 	bl	8001528 <HAL_GetTick>
 8001ee6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ee8:	e008      	b.n	8001efc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eea:	f7ff fb1d 	bl	8001528 <HAL_GetTick>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d901      	bls.n	8001efc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	e06d      	b.n	8001fd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001efc:	4b29      	ldr	r3, [pc, #164]	; (8001fa4 <HAL_RCC_OscConfig+0x4c4>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d1f0      	bne.n	8001eea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a1b      	ldr	r3, [r3, #32]
 8001f0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f10:	d108      	bne.n	8001f24 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f12:	4b24      	ldr	r3, [pc, #144]	; (8001fa4 <HAL_RCC_OscConfig+0x4c4>)
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	4921      	ldr	r1, [pc, #132]	; (8001fa4 <HAL_RCC_OscConfig+0x4c4>)
 8001f20:	4313      	orrs	r3, r2
 8001f22:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f24:	4b1f      	ldr	r3, [pc, #124]	; (8001fa4 <HAL_RCC_OscConfig+0x4c4>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6a19      	ldr	r1, [r3, #32]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f34:	430b      	orrs	r3, r1
 8001f36:	491b      	ldr	r1, [pc, #108]	; (8001fa4 <HAL_RCC_OscConfig+0x4c4>)
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f3c:	4b1b      	ldr	r3, [pc, #108]	; (8001fac <HAL_RCC_OscConfig+0x4cc>)
 8001f3e:	2201      	movs	r2, #1
 8001f40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f42:	f7ff faf1 	bl	8001528 <HAL_GetTick>
 8001f46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f48:	e008      	b.n	8001f5c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f4a:	f7ff faed 	bl	8001528 <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d901      	bls.n	8001f5c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e03d      	b.n	8001fd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f5c:	4b11      	ldr	r3, [pc, #68]	; (8001fa4 <HAL_RCC_OscConfig+0x4c4>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d0f0      	beq.n	8001f4a <HAL_RCC_OscConfig+0x46a>
 8001f68:	e035      	b.n	8001fd6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f6a:	4b10      	ldr	r3, [pc, #64]	; (8001fac <HAL_RCC_OscConfig+0x4cc>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f70:	f7ff fada 	bl	8001528 <HAL_GetTick>
 8001f74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f76:	e008      	b.n	8001f8a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f78:	f7ff fad6 	bl	8001528 <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e026      	b.n	8001fd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f8a:	4b06      	ldr	r3, [pc, #24]	; (8001fa4 <HAL_RCC_OscConfig+0x4c4>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d1f0      	bne.n	8001f78 <HAL_RCC_OscConfig+0x498>
 8001f96:	e01e      	b.n	8001fd6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	69db      	ldr	r3, [r3, #28]
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d107      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e019      	b.n	8001fd8 <HAL_RCC_OscConfig+0x4f8>
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	40007000 	.word	0x40007000
 8001fac:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001fb0:	4b0b      	ldr	r3, [pc, #44]	; (8001fe0 <HAL_RCC_OscConfig+0x500>)
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6a1b      	ldr	r3, [r3, #32]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d106      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d001      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e000      	b.n	8001fd8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001fd6:	2300      	movs	r3, #0
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3718      	adds	r7, #24
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	40021000 	.word	0x40021000

08001fe4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d101      	bne.n	8001ff8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e0d0      	b.n	800219a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ff8:	4b6a      	ldr	r3, [pc, #424]	; (80021a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0307 	and.w	r3, r3, #7
 8002000:	683a      	ldr	r2, [r7, #0]
 8002002:	429a      	cmp	r2, r3
 8002004:	d910      	bls.n	8002028 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002006:	4b67      	ldr	r3, [pc, #412]	; (80021a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f023 0207 	bic.w	r2, r3, #7
 800200e:	4965      	ldr	r1, [pc, #404]	; (80021a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	4313      	orrs	r3, r2
 8002014:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002016:	4b63      	ldr	r3, [pc, #396]	; (80021a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0307 	and.w	r3, r3, #7
 800201e:	683a      	ldr	r2, [r7, #0]
 8002020:	429a      	cmp	r2, r3
 8002022:	d001      	beq.n	8002028 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e0b8      	b.n	800219a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0302 	and.w	r3, r3, #2
 8002030:	2b00      	cmp	r3, #0
 8002032:	d020      	beq.n	8002076 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0304 	and.w	r3, r3, #4
 800203c:	2b00      	cmp	r3, #0
 800203e:	d005      	beq.n	800204c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002040:	4b59      	ldr	r3, [pc, #356]	; (80021a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	4a58      	ldr	r2, [pc, #352]	; (80021a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002046:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800204a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0308 	and.w	r3, r3, #8
 8002054:	2b00      	cmp	r3, #0
 8002056:	d005      	beq.n	8002064 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002058:	4b53      	ldr	r3, [pc, #332]	; (80021a8 <HAL_RCC_ClockConfig+0x1c4>)
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	4a52      	ldr	r2, [pc, #328]	; (80021a8 <HAL_RCC_ClockConfig+0x1c4>)
 800205e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002062:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002064:	4b50      	ldr	r3, [pc, #320]	; (80021a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	494d      	ldr	r1, [pc, #308]	; (80021a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002072:	4313      	orrs	r3, r2
 8002074:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0301 	and.w	r3, r3, #1
 800207e:	2b00      	cmp	r3, #0
 8002080:	d040      	beq.n	8002104 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	2b01      	cmp	r3, #1
 8002088:	d107      	bne.n	800209a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800208a:	4b47      	ldr	r3, [pc, #284]	; (80021a8 <HAL_RCC_ClockConfig+0x1c4>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d115      	bne.n	80020c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e07f      	b.n	800219a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d107      	bne.n	80020b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020a2:	4b41      	ldr	r3, [pc, #260]	; (80021a8 <HAL_RCC_ClockConfig+0x1c4>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d109      	bne.n	80020c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e073      	b.n	800219a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020b2:	4b3d      	ldr	r3, [pc, #244]	; (80021a8 <HAL_RCC_ClockConfig+0x1c4>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0302 	and.w	r3, r3, #2
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d101      	bne.n	80020c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e06b      	b.n	800219a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020c2:	4b39      	ldr	r3, [pc, #228]	; (80021a8 <HAL_RCC_ClockConfig+0x1c4>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f023 0203 	bic.w	r2, r3, #3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	4936      	ldr	r1, [pc, #216]	; (80021a8 <HAL_RCC_ClockConfig+0x1c4>)
 80020d0:	4313      	orrs	r3, r2
 80020d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020d4:	f7ff fa28 	bl	8001528 <HAL_GetTick>
 80020d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020da:	e00a      	b.n	80020f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020dc:	f7ff fa24 	bl	8001528 <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e053      	b.n	800219a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020f2:	4b2d      	ldr	r3, [pc, #180]	; (80021a8 <HAL_RCC_ClockConfig+0x1c4>)
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f003 020c 	and.w	r2, r3, #12
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	429a      	cmp	r2, r3
 8002102:	d1eb      	bne.n	80020dc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002104:	4b27      	ldr	r3, [pc, #156]	; (80021a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0307 	and.w	r3, r3, #7
 800210c:	683a      	ldr	r2, [r7, #0]
 800210e:	429a      	cmp	r2, r3
 8002110:	d210      	bcs.n	8002134 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002112:	4b24      	ldr	r3, [pc, #144]	; (80021a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f023 0207 	bic.w	r2, r3, #7
 800211a:	4922      	ldr	r1, [pc, #136]	; (80021a4 <HAL_RCC_ClockConfig+0x1c0>)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	4313      	orrs	r3, r2
 8002120:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002122:	4b20      	ldr	r3, [pc, #128]	; (80021a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0307 	and.w	r3, r3, #7
 800212a:	683a      	ldr	r2, [r7, #0]
 800212c:	429a      	cmp	r2, r3
 800212e:	d001      	beq.n	8002134 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e032      	b.n	800219a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0304 	and.w	r3, r3, #4
 800213c:	2b00      	cmp	r3, #0
 800213e:	d008      	beq.n	8002152 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002140:	4b19      	ldr	r3, [pc, #100]	; (80021a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	4916      	ldr	r1, [pc, #88]	; (80021a8 <HAL_RCC_ClockConfig+0x1c4>)
 800214e:	4313      	orrs	r3, r2
 8002150:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0308 	and.w	r3, r3, #8
 800215a:	2b00      	cmp	r3, #0
 800215c:	d009      	beq.n	8002172 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800215e:	4b12      	ldr	r3, [pc, #72]	; (80021a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	691b      	ldr	r3, [r3, #16]
 800216a:	00db      	lsls	r3, r3, #3
 800216c:	490e      	ldr	r1, [pc, #56]	; (80021a8 <HAL_RCC_ClockConfig+0x1c4>)
 800216e:	4313      	orrs	r3, r2
 8002170:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002172:	f000 f821 	bl	80021b8 <HAL_RCC_GetSysClockFreq>
 8002176:	4602      	mov	r2, r0
 8002178:	4b0b      	ldr	r3, [pc, #44]	; (80021a8 <HAL_RCC_ClockConfig+0x1c4>)
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	091b      	lsrs	r3, r3, #4
 800217e:	f003 030f 	and.w	r3, r3, #15
 8002182:	490a      	ldr	r1, [pc, #40]	; (80021ac <HAL_RCC_ClockConfig+0x1c8>)
 8002184:	5ccb      	ldrb	r3, [r1, r3]
 8002186:	fa22 f303 	lsr.w	r3, r2, r3
 800218a:	4a09      	ldr	r2, [pc, #36]	; (80021b0 <HAL_RCC_ClockConfig+0x1cc>)
 800218c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800218e:	4b09      	ldr	r3, [pc, #36]	; (80021b4 <HAL_RCC_ClockConfig+0x1d0>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4618      	mov	r0, r3
 8002194:	f7ff f986 	bl	80014a4 <HAL_InitTick>

  return HAL_OK;
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3710      	adds	r7, #16
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	40022000 	.word	0x40022000
 80021a8:	40021000 	.word	0x40021000
 80021ac:	08002adc 	.word	0x08002adc
 80021b0:	20000058 	.word	0x20000058
 80021b4:	2000005c 	.word	0x2000005c

080021b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b087      	sub	sp, #28
 80021bc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021be:	2300      	movs	r3, #0
 80021c0:	60fb      	str	r3, [r7, #12]
 80021c2:	2300      	movs	r3, #0
 80021c4:	60bb      	str	r3, [r7, #8]
 80021c6:	2300      	movs	r3, #0
 80021c8:	617b      	str	r3, [r7, #20]
 80021ca:	2300      	movs	r3, #0
 80021cc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80021ce:	2300      	movs	r3, #0
 80021d0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80021d2:	4b1e      	ldr	r3, [pc, #120]	; (800224c <HAL_RCC_GetSysClockFreq+0x94>)
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f003 030c 	and.w	r3, r3, #12
 80021de:	2b04      	cmp	r3, #4
 80021e0:	d002      	beq.n	80021e8 <HAL_RCC_GetSysClockFreq+0x30>
 80021e2:	2b08      	cmp	r3, #8
 80021e4:	d003      	beq.n	80021ee <HAL_RCC_GetSysClockFreq+0x36>
 80021e6:	e027      	b.n	8002238 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021e8:	4b19      	ldr	r3, [pc, #100]	; (8002250 <HAL_RCC_GetSysClockFreq+0x98>)
 80021ea:	613b      	str	r3, [r7, #16]
      break;
 80021ec:	e027      	b.n	800223e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	0c9b      	lsrs	r3, r3, #18
 80021f2:	f003 030f 	and.w	r3, r3, #15
 80021f6:	4a17      	ldr	r2, [pc, #92]	; (8002254 <HAL_RCC_GetSysClockFreq+0x9c>)
 80021f8:	5cd3      	ldrb	r3, [r2, r3]
 80021fa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d010      	beq.n	8002228 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002206:	4b11      	ldr	r3, [pc, #68]	; (800224c <HAL_RCC_GetSysClockFreq+0x94>)
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	0c5b      	lsrs	r3, r3, #17
 800220c:	f003 0301 	and.w	r3, r3, #1
 8002210:	4a11      	ldr	r2, [pc, #68]	; (8002258 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002212:	5cd3      	ldrb	r3, [r2, r3]
 8002214:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a0d      	ldr	r2, [pc, #52]	; (8002250 <HAL_RCC_GetSysClockFreq+0x98>)
 800221a:	fb03 f202 	mul.w	r2, r3, r2
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	fbb2 f3f3 	udiv	r3, r2, r3
 8002224:	617b      	str	r3, [r7, #20]
 8002226:	e004      	b.n	8002232 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	4a0c      	ldr	r2, [pc, #48]	; (800225c <HAL_RCC_GetSysClockFreq+0xa4>)
 800222c:	fb02 f303 	mul.w	r3, r2, r3
 8002230:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	613b      	str	r3, [r7, #16]
      break;
 8002236:	e002      	b.n	800223e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002238:	4b05      	ldr	r3, [pc, #20]	; (8002250 <HAL_RCC_GetSysClockFreq+0x98>)
 800223a:	613b      	str	r3, [r7, #16]
      break;
 800223c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800223e:	693b      	ldr	r3, [r7, #16]
}
 8002240:	4618      	mov	r0, r3
 8002242:	371c      	adds	r7, #28
 8002244:	46bd      	mov	sp, r7
 8002246:	bc80      	pop	{r7}
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	40021000 	.word	0x40021000
 8002250:	007a1200 	.word	0x007a1200
 8002254:	08002aec 	.word	0x08002aec
 8002258:	08002afc 	.word	0x08002afc
 800225c:	003d0900 	.word	0x003d0900

08002260 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002260:	b480      	push	{r7}
 8002262:	b085      	sub	sp, #20
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002268:	4b0a      	ldr	r3, [pc, #40]	; (8002294 <RCC_Delay+0x34>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a0a      	ldr	r2, [pc, #40]	; (8002298 <RCC_Delay+0x38>)
 800226e:	fba2 2303 	umull	r2, r3, r2, r3
 8002272:	0a5b      	lsrs	r3, r3, #9
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	fb02 f303 	mul.w	r3, r2, r3
 800227a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800227c:	bf00      	nop
  }
  while (Delay --);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	1e5a      	subs	r2, r3, #1
 8002282:	60fa      	str	r2, [r7, #12]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d1f9      	bne.n	800227c <RCC_Delay+0x1c>
}
 8002288:	bf00      	nop
 800228a:	bf00      	nop
 800228c:	3714      	adds	r7, #20
 800228e:	46bd      	mov	sp, r7
 8002290:	bc80      	pop	{r7}
 8002292:	4770      	bx	lr
 8002294:	20000058 	.word	0x20000058
 8002298:	10624dd3 	.word	0x10624dd3

0800229c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d101      	bne.n	80022ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e041      	b.n	8002332 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d106      	bne.n	80022c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f7ff f842 	bl	800134c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2202      	movs	r2, #2
 80022cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	3304      	adds	r3, #4
 80022d8:	4619      	mov	r1, r3
 80022da:	4610      	mov	r0, r2
 80022dc:	f000 fa6e 	bl	80027bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2201      	movs	r2, #1
 80022e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2201      	movs	r2, #1
 80022ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2201      	movs	r2, #1
 80022f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2201      	movs	r2, #1
 80022fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2201      	movs	r2, #1
 8002304:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2201      	movs	r2, #1
 800230c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2201      	movs	r2, #1
 8002314:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2201      	movs	r2, #1
 800231c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2201      	movs	r2, #1
 8002324:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2201      	movs	r2, #1
 800232c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
	...

0800233c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800233c:	b480      	push	{r7}
 800233e:	b085      	sub	sp, #20
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800234a:	b2db      	uxtb	r3, r3
 800234c:	2b01      	cmp	r3, #1
 800234e:	d001      	beq.n	8002354 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e035      	b.n	80023c0 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2202      	movs	r2, #2
 8002358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	68da      	ldr	r2, [r3, #12]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f042 0201 	orr.w	r2, r2, #1
 800236a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a16      	ldr	r2, [pc, #88]	; (80023cc <HAL_TIM_Base_Start_IT+0x90>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d009      	beq.n	800238a <HAL_TIM_Base_Start_IT+0x4e>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800237e:	d004      	beq.n	800238a <HAL_TIM_Base_Start_IT+0x4e>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a12      	ldr	r2, [pc, #72]	; (80023d0 <HAL_TIM_Base_Start_IT+0x94>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d111      	bne.n	80023ae <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	f003 0307 	and.w	r3, r3, #7
 8002394:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2b06      	cmp	r3, #6
 800239a:	d010      	beq.n	80023be <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f042 0201 	orr.w	r2, r2, #1
 80023aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023ac:	e007      	b.n	80023be <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f042 0201 	orr.w	r2, r2, #1
 80023bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80023be:	2300      	movs	r3, #0
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3714      	adds	r7, #20
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bc80      	pop	{r7}
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	40012c00 	.word	0x40012c00
 80023d0:	40000400 	.word	0x40000400

080023d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	691b      	ldr	r3, [r3, #16]
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d122      	bne.n	8002430 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	f003 0302 	and.w	r3, r3, #2
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d11b      	bne.n	8002430 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f06f 0202 	mvn.w	r2, #2
 8002400:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2201      	movs	r2, #1
 8002406:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	699b      	ldr	r3, [r3, #24]
 800240e:	f003 0303 	and.w	r3, r3, #3
 8002412:	2b00      	cmp	r3, #0
 8002414:	d003      	beq.n	800241e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f000 f9b4 	bl	8002784 <HAL_TIM_IC_CaptureCallback>
 800241c:	e005      	b.n	800242a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f000 f9a7 	bl	8002772 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f000 f9b6 	bl	8002796 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	691b      	ldr	r3, [r3, #16]
 8002436:	f003 0304 	and.w	r3, r3, #4
 800243a:	2b04      	cmp	r3, #4
 800243c:	d122      	bne.n	8002484 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	f003 0304 	and.w	r3, r3, #4
 8002448:	2b04      	cmp	r3, #4
 800244a:	d11b      	bne.n	8002484 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f06f 0204 	mvn.w	r2, #4
 8002454:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2202      	movs	r2, #2
 800245a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	699b      	ldr	r3, [r3, #24]
 8002462:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002466:	2b00      	cmp	r3, #0
 8002468:	d003      	beq.n	8002472 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f000 f98a 	bl	8002784 <HAL_TIM_IC_CaptureCallback>
 8002470:	e005      	b.n	800247e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f000 f97d 	bl	8002772 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f000 f98c 	bl	8002796 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	691b      	ldr	r3, [r3, #16]
 800248a:	f003 0308 	and.w	r3, r3, #8
 800248e:	2b08      	cmp	r3, #8
 8002490:	d122      	bne.n	80024d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	f003 0308 	and.w	r3, r3, #8
 800249c:	2b08      	cmp	r3, #8
 800249e:	d11b      	bne.n	80024d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f06f 0208 	mvn.w	r2, #8
 80024a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2204      	movs	r2, #4
 80024ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	69db      	ldr	r3, [r3, #28]
 80024b6:	f003 0303 	and.w	r3, r3, #3
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d003      	beq.n	80024c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f000 f960 	bl	8002784 <HAL_TIM_IC_CaptureCallback>
 80024c4:	e005      	b.n	80024d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f000 f953 	bl	8002772 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f000 f962 	bl	8002796 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	691b      	ldr	r3, [r3, #16]
 80024de:	f003 0310 	and.w	r3, r3, #16
 80024e2:	2b10      	cmp	r3, #16
 80024e4:	d122      	bne.n	800252c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	f003 0310 	and.w	r3, r3, #16
 80024f0:	2b10      	cmp	r3, #16
 80024f2:	d11b      	bne.n	800252c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f06f 0210 	mvn.w	r2, #16
 80024fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2208      	movs	r2, #8
 8002502:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	69db      	ldr	r3, [r3, #28]
 800250a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800250e:	2b00      	cmp	r3, #0
 8002510:	d003      	beq.n	800251a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f000 f936 	bl	8002784 <HAL_TIM_IC_CaptureCallback>
 8002518:	e005      	b.n	8002526 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f000 f929 	bl	8002772 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f000 f938 	bl	8002796 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	691b      	ldr	r3, [r3, #16]
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	2b01      	cmp	r3, #1
 8002538:	d10e      	bne.n	8002558 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	f003 0301 	and.w	r3, r3, #1
 8002544:	2b01      	cmp	r3, #1
 8002546:	d107      	bne.n	8002558 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f06f 0201 	mvn.w	r2, #1
 8002550:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f7fe fde4 	bl	8001120 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	691b      	ldr	r3, [r3, #16]
 800255e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002562:	2b80      	cmp	r3, #128	; 0x80
 8002564:	d10e      	bne.n	8002584 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002570:	2b80      	cmp	r3, #128	; 0x80
 8002572:	d107      	bne.n	8002584 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800257c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f000 fa6b 	bl	8002a5a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800258e:	2b40      	cmp	r3, #64	; 0x40
 8002590:	d10e      	bne.n	80025b0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800259c:	2b40      	cmp	r3, #64	; 0x40
 800259e:	d107      	bne.n	80025b0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80025a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f000 f8fc 	bl	80027a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	f003 0320 	and.w	r3, r3, #32
 80025ba:	2b20      	cmp	r3, #32
 80025bc:	d10e      	bne.n	80025dc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	f003 0320 	and.w	r3, r3, #32
 80025c8:	2b20      	cmp	r3, #32
 80025ca:	d107      	bne.n	80025dc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f06f 0220 	mvn.w	r2, #32
 80025d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f000 fa36 	bl	8002a48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80025dc:	bf00      	nop
 80025de:	3708      	adds	r7, #8
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025ee:	2300      	movs	r3, #0
 80025f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d101      	bne.n	8002600 <HAL_TIM_ConfigClockSource+0x1c>
 80025fc:	2302      	movs	r3, #2
 80025fe:	e0b4      	b.n	800276a <HAL_TIM_ConfigClockSource+0x186>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2202      	movs	r2, #2
 800260c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800261e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002626:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	68ba      	ldr	r2, [r7, #8]
 800262e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002638:	d03e      	beq.n	80026b8 <HAL_TIM_ConfigClockSource+0xd4>
 800263a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800263e:	f200 8087 	bhi.w	8002750 <HAL_TIM_ConfigClockSource+0x16c>
 8002642:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002646:	f000 8086 	beq.w	8002756 <HAL_TIM_ConfigClockSource+0x172>
 800264a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800264e:	d87f      	bhi.n	8002750 <HAL_TIM_ConfigClockSource+0x16c>
 8002650:	2b70      	cmp	r3, #112	; 0x70
 8002652:	d01a      	beq.n	800268a <HAL_TIM_ConfigClockSource+0xa6>
 8002654:	2b70      	cmp	r3, #112	; 0x70
 8002656:	d87b      	bhi.n	8002750 <HAL_TIM_ConfigClockSource+0x16c>
 8002658:	2b60      	cmp	r3, #96	; 0x60
 800265a:	d050      	beq.n	80026fe <HAL_TIM_ConfigClockSource+0x11a>
 800265c:	2b60      	cmp	r3, #96	; 0x60
 800265e:	d877      	bhi.n	8002750 <HAL_TIM_ConfigClockSource+0x16c>
 8002660:	2b50      	cmp	r3, #80	; 0x50
 8002662:	d03c      	beq.n	80026de <HAL_TIM_ConfigClockSource+0xfa>
 8002664:	2b50      	cmp	r3, #80	; 0x50
 8002666:	d873      	bhi.n	8002750 <HAL_TIM_ConfigClockSource+0x16c>
 8002668:	2b40      	cmp	r3, #64	; 0x40
 800266a:	d058      	beq.n	800271e <HAL_TIM_ConfigClockSource+0x13a>
 800266c:	2b40      	cmp	r3, #64	; 0x40
 800266e:	d86f      	bhi.n	8002750 <HAL_TIM_ConfigClockSource+0x16c>
 8002670:	2b30      	cmp	r3, #48	; 0x30
 8002672:	d064      	beq.n	800273e <HAL_TIM_ConfigClockSource+0x15a>
 8002674:	2b30      	cmp	r3, #48	; 0x30
 8002676:	d86b      	bhi.n	8002750 <HAL_TIM_ConfigClockSource+0x16c>
 8002678:	2b20      	cmp	r3, #32
 800267a:	d060      	beq.n	800273e <HAL_TIM_ConfigClockSource+0x15a>
 800267c:	2b20      	cmp	r3, #32
 800267e:	d867      	bhi.n	8002750 <HAL_TIM_ConfigClockSource+0x16c>
 8002680:	2b00      	cmp	r3, #0
 8002682:	d05c      	beq.n	800273e <HAL_TIM_ConfigClockSource+0x15a>
 8002684:	2b10      	cmp	r3, #16
 8002686:	d05a      	beq.n	800273e <HAL_TIM_ConfigClockSource+0x15a>
 8002688:	e062      	b.n	8002750 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800269a:	f000 f95e 	bl	800295a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80026ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	68ba      	ldr	r2, [r7, #8]
 80026b4:	609a      	str	r2, [r3, #8]
      break;
 80026b6:	e04f      	b.n	8002758 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80026c8:	f000 f947 	bl	800295a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	689a      	ldr	r2, [r3, #8]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80026da:	609a      	str	r2, [r3, #8]
      break;
 80026dc:	e03c      	b.n	8002758 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80026ea:	461a      	mov	r2, r3
 80026ec:	f000 f8be 	bl	800286c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2150      	movs	r1, #80	; 0x50
 80026f6:	4618      	mov	r0, r3
 80026f8:	f000 f915 	bl	8002926 <TIM_ITRx_SetConfig>
      break;
 80026fc:	e02c      	b.n	8002758 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800270a:	461a      	mov	r2, r3
 800270c:	f000 f8dc 	bl	80028c8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2160      	movs	r1, #96	; 0x60
 8002716:	4618      	mov	r0, r3
 8002718:	f000 f905 	bl	8002926 <TIM_ITRx_SetConfig>
      break;
 800271c:	e01c      	b.n	8002758 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800272a:	461a      	mov	r2, r3
 800272c:	f000 f89e 	bl	800286c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2140      	movs	r1, #64	; 0x40
 8002736:	4618      	mov	r0, r3
 8002738:	f000 f8f5 	bl	8002926 <TIM_ITRx_SetConfig>
      break;
 800273c:	e00c      	b.n	8002758 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4619      	mov	r1, r3
 8002748:	4610      	mov	r0, r2
 800274a:	f000 f8ec 	bl	8002926 <TIM_ITRx_SetConfig>
      break;
 800274e:	e003      	b.n	8002758 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	73fb      	strb	r3, [r7, #15]
      break;
 8002754:	e000      	b.n	8002758 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002756:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2201      	movs	r2, #1
 800275c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002768:	7bfb      	ldrb	r3, [r7, #15]
}
 800276a:	4618      	mov	r0, r3
 800276c:	3710      	adds	r7, #16
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}

08002772 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002772:	b480      	push	{r7}
 8002774:	b083      	sub	sp, #12
 8002776:	af00      	add	r7, sp, #0
 8002778:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800277a:	bf00      	nop
 800277c:	370c      	adds	r7, #12
 800277e:	46bd      	mov	sp, r7
 8002780:	bc80      	pop	{r7}
 8002782:	4770      	bx	lr

08002784 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800278c:	bf00      	nop
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	bc80      	pop	{r7}
 8002794:	4770      	bx	lr

08002796 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002796:	b480      	push	{r7}
 8002798:	b083      	sub	sp, #12
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800279e:	bf00      	nop
 80027a0:	370c      	adds	r7, #12
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bc80      	pop	{r7}
 80027a6:	4770      	bx	lr

080027a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80027b0:	bf00      	nop
 80027b2:	370c      	adds	r7, #12
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bc80      	pop	{r7}
 80027b8:	4770      	bx	lr
	...

080027bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80027bc:	b480      	push	{r7}
 80027be:	b085      	sub	sp, #20
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	4a25      	ldr	r2, [pc, #148]	; (8002864 <TIM_Base_SetConfig+0xa8>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d007      	beq.n	80027e4 <TIM_Base_SetConfig+0x28>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027da:	d003      	beq.n	80027e4 <TIM_Base_SetConfig+0x28>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	4a22      	ldr	r2, [pc, #136]	; (8002868 <TIM_Base_SetConfig+0xac>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d108      	bne.n	80027f6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	68fa      	ldr	r2, [r7, #12]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a1a      	ldr	r2, [pc, #104]	; (8002864 <TIM_Base_SetConfig+0xa8>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d007      	beq.n	800280e <TIM_Base_SetConfig+0x52>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002804:	d003      	beq.n	800280e <TIM_Base_SetConfig+0x52>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a17      	ldr	r2, [pc, #92]	; (8002868 <TIM_Base_SetConfig+0xac>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d108      	bne.n	8002820 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002814:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	68fa      	ldr	r2, [r7, #12]
 800281c:	4313      	orrs	r3, r2
 800281e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	695b      	ldr	r3, [r3, #20]
 800282a:	4313      	orrs	r3, r2
 800282c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	68fa      	ldr	r2, [r7, #12]
 8002832:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	689a      	ldr	r2, [r3, #8]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	4a07      	ldr	r2, [pc, #28]	; (8002864 <TIM_Base_SetConfig+0xa8>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d103      	bne.n	8002854 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	691a      	ldr	r2, [r3, #16]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2201      	movs	r2, #1
 8002858:	615a      	str	r2, [r3, #20]
}
 800285a:	bf00      	nop
 800285c:	3714      	adds	r7, #20
 800285e:	46bd      	mov	sp, r7
 8002860:	bc80      	pop	{r7}
 8002862:	4770      	bx	lr
 8002864:	40012c00 	.word	0x40012c00
 8002868:	40000400 	.word	0x40000400

0800286c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800286c:	b480      	push	{r7}
 800286e:	b087      	sub	sp, #28
 8002870:	af00      	add	r7, sp, #0
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	60b9      	str	r1, [r7, #8]
 8002876:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6a1b      	ldr	r3, [r3, #32]
 800287c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	6a1b      	ldr	r3, [r3, #32]
 8002882:	f023 0201 	bic.w	r2, r3, #1
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	699b      	ldr	r3, [r3, #24]
 800288e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002896:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	011b      	lsls	r3, r3, #4
 800289c:	693a      	ldr	r2, [r7, #16]
 800289e:	4313      	orrs	r3, r2
 80028a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	f023 030a 	bic.w	r3, r3, #10
 80028a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80028aa:	697a      	ldr	r2, [r7, #20]
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	693a      	ldr	r2, [r7, #16]
 80028b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	697a      	ldr	r2, [r7, #20]
 80028bc:	621a      	str	r2, [r3, #32]
}
 80028be:	bf00      	nop
 80028c0:	371c      	adds	r7, #28
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bc80      	pop	{r7}
 80028c6:	4770      	bx	lr

080028c8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b087      	sub	sp, #28
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	60b9      	str	r1, [r7, #8]
 80028d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6a1b      	ldr	r3, [r3, #32]
 80028d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6a1b      	ldr	r3, [r3, #32]
 80028de:	f023 0210 	bic.w	r2, r3, #16
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	699b      	ldr	r3, [r3, #24]
 80028ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80028f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	031b      	lsls	r3, r3, #12
 80028f8:	693a      	ldr	r2, [r7, #16]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002904:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	011b      	lsls	r3, r3, #4
 800290a:	697a      	ldr	r2, [r7, #20]
 800290c:	4313      	orrs	r3, r2
 800290e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	693a      	ldr	r2, [r7, #16]
 8002914:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	697a      	ldr	r2, [r7, #20]
 800291a:	621a      	str	r2, [r3, #32]
}
 800291c:	bf00      	nop
 800291e:	371c      	adds	r7, #28
 8002920:	46bd      	mov	sp, r7
 8002922:	bc80      	pop	{r7}
 8002924:	4770      	bx	lr

08002926 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002926:	b480      	push	{r7}
 8002928:	b085      	sub	sp, #20
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
 800292e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800293c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800293e:	683a      	ldr	r2, [r7, #0]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	4313      	orrs	r3, r2
 8002944:	f043 0307 	orr.w	r3, r3, #7
 8002948:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	68fa      	ldr	r2, [r7, #12]
 800294e:	609a      	str	r2, [r3, #8]
}
 8002950:	bf00      	nop
 8002952:	3714      	adds	r7, #20
 8002954:	46bd      	mov	sp, r7
 8002956:	bc80      	pop	{r7}
 8002958:	4770      	bx	lr

0800295a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800295a:	b480      	push	{r7}
 800295c:	b087      	sub	sp, #28
 800295e:	af00      	add	r7, sp, #0
 8002960:	60f8      	str	r0, [r7, #12]
 8002962:	60b9      	str	r1, [r7, #8]
 8002964:	607a      	str	r2, [r7, #4]
 8002966:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002974:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	021a      	lsls	r2, r3, #8
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	431a      	orrs	r2, r3
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	4313      	orrs	r3, r2
 8002982:	697a      	ldr	r2, [r7, #20]
 8002984:	4313      	orrs	r3, r2
 8002986:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	697a      	ldr	r2, [r7, #20]
 800298c:	609a      	str	r2, [r3, #8]
}
 800298e:	bf00      	nop
 8002990:	371c      	adds	r7, #28
 8002992:	46bd      	mov	sp, r7
 8002994:	bc80      	pop	{r7}
 8002996:	4770      	bx	lr

08002998 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002998:	b480      	push	{r7}
 800299a:	b085      	sub	sp, #20
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d101      	bne.n	80029b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80029ac:	2302      	movs	r3, #2
 80029ae:	e041      	b.n	8002a34 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2202      	movs	r2, #2
 80029bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	68fa      	ldr	r2, [r7, #12]
 80029de:	4313      	orrs	r3, r2
 80029e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	68fa      	ldr	r2, [r7, #12]
 80029e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a14      	ldr	r2, [pc, #80]	; (8002a40 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d009      	beq.n	8002a08 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029fc:	d004      	beq.n	8002a08 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a10      	ldr	r2, [pc, #64]	; (8002a44 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d10c      	bne.n	8002a22 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a0e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	68ba      	ldr	r2, [r7, #8]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	68ba      	ldr	r2, [r7, #8]
 8002a20:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2201      	movs	r2, #1
 8002a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a32:	2300      	movs	r3, #0
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3714      	adds	r7, #20
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bc80      	pop	{r7}
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	40012c00 	.word	0x40012c00
 8002a44:	40000400 	.word	0x40000400

08002a48 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a50:	bf00      	nop
 8002a52:	370c      	adds	r7, #12
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bc80      	pop	{r7}
 8002a58:	4770      	bx	lr

08002a5a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a5a:	b480      	push	{r7}
 8002a5c:	b083      	sub	sp, #12
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a62:	bf00      	nop
 8002a64:	370c      	adds	r7, #12
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bc80      	pop	{r7}
 8002a6a:	4770      	bx	lr

08002a6c <memset>:
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	4402      	add	r2, r0
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d100      	bne.n	8002a76 <memset+0xa>
 8002a74:	4770      	bx	lr
 8002a76:	f803 1b01 	strb.w	r1, [r3], #1
 8002a7a:	e7f9      	b.n	8002a70 <memset+0x4>

08002a7c <__libc_init_array>:
 8002a7c:	b570      	push	{r4, r5, r6, lr}
 8002a7e:	2600      	movs	r6, #0
 8002a80:	4d0c      	ldr	r5, [pc, #48]	; (8002ab4 <__libc_init_array+0x38>)
 8002a82:	4c0d      	ldr	r4, [pc, #52]	; (8002ab8 <__libc_init_array+0x3c>)
 8002a84:	1b64      	subs	r4, r4, r5
 8002a86:	10a4      	asrs	r4, r4, #2
 8002a88:	42a6      	cmp	r6, r4
 8002a8a:	d109      	bne.n	8002aa0 <__libc_init_array+0x24>
 8002a8c:	f000 f81a 	bl	8002ac4 <_init>
 8002a90:	2600      	movs	r6, #0
 8002a92:	4d0a      	ldr	r5, [pc, #40]	; (8002abc <__libc_init_array+0x40>)
 8002a94:	4c0a      	ldr	r4, [pc, #40]	; (8002ac0 <__libc_init_array+0x44>)
 8002a96:	1b64      	subs	r4, r4, r5
 8002a98:	10a4      	asrs	r4, r4, #2
 8002a9a:	42a6      	cmp	r6, r4
 8002a9c:	d105      	bne.n	8002aaa <__libc_init_array+0x2e>
 8002a9e:	bd70      	pop	{r4, r5, r6, pc}
 8002aa0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002aa4:	4798      	blx	r3
 8002aa6:	3601      	adds	r6, #1
 8002aa8:	e7ee      	b.n	8002a88 <__libc_init_array+0xc>
 8002aaa:	f855 3b04 	ldr.w	r3, [r5], #4
 8002aae:	4798      	blx	r3
 8002ab0:	3601      	adds	r6, #1
 8002ab2:	e7f2      	b.n	8002a9a <__libc_init_array+0x1e>
 8002ab4:	08002b00 	.word	0x08002b00
 8002ab8:	08002b00 	.word	0x08002b00
 8002abc:	08002b00 	.word	0x08002b00
 8002ac0:	08002b04 	.word	0x08002b04

08002ac4 <_init>:
 8002ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ac6:	bf00      	nop
 8002ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002aca:	bc08      	pop	{r3}
 8002acc:	469e      	mov	lr, r3
 8002ace:	4770      	bx	lr

08002ad0 <_fini>:
 8002ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ad2:	bf00      	nop
 8002ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ad6:	bc08      	pop	{r3}
 8002ad8:	469e      	mov	lr, r3
 8002ada:	4770      	bx	lr
